// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üß† GENESIS_LAUNCHER ‚Äî Telegram Control   ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

const fs          = require('fs')
const path        = require('path')
const TelegramBot = require('node-telegram-bot-api')
const { Octokit } = require('@octokit/rest')

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üõ°Ô∏è ENV GUARD: –ó–∞—â–∏—Ç–∞ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã        ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
const requiredEnv = [
  'TELEGRAM_TOKEN', 'ADMIN_ID',
  'GITHUB_TOKEN', 'GITHUB_OWNER', 'GITHUB_REPO'
]
let envValid = true

console.log('\nüß≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GENESIS_LAUNCHER...')
for (const key of requiredEnv) {
  const val = process.env[key]
  if (!val) {
    console.log(`üî¥ ENV –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${key}`)
    envValid = false
  } else {
    console.log(`üü¢ ${key} –∞–∫—Ç–∏–≤–µ–Ω: ${val.slice(0,6)}...`)
  }
}
if (!envValid) {
  console.log('\n‚õîÔ∏è –ó–∞–¥–∞–π—Ç–µ –≤—Å–µ ENV-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.')
  process.exit(1)
}

const TOKEN         = process.env.TELEGRAM_TOKEN
const ADMIN_ID      = String(process.env.ADMIN_ID)
const GITHUB_TOKEN  = process.env.GITHUB_TOKEN
const GITHUB_OWNER  = process.env.GITHUB_OWNER
const GITHUB_REPO   = process.env.GITHUB_REPO
const GITHUB_BRANCH = process.env.GITHUB_BRANCH || 'main'

const octokit = new Octokit({ auth: GITHUB_TOKEN })

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üìÇ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ —Ñ–∞–π–ª—ã           ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
const memoryPath  = path.join(__dirname, 'memory')
const usersPath   = path.join(__dirname, 'users.json')
const lockPath    = path.join(memoryPath, 'botEnabled.lock')

// —Å–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –Ω–∞–¥–æ
if (!fs.existsSync(memoryPath)) fs.mkdirSync(memoryPath)
if (!fs.existsSync(usersPath))  fs.writeFileSync(usersPath, JSON.stringify({},null,2))
if (!fs.existsSync(lockPath))   fs.writeFileSync(lockPath, 'enabled')

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üõ†Ô∏è –§–ª–∞–≥–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞             ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
function isBotEnabled()    { return fs.existsSync(lockPath) }
function activateBotFlag() { fs.writeFileSync(lockPath, 'enabled') }
function deactivateBotFlag(){
  if (fs.existsSync(lockPath)) fs.unlinkSync(lockPath)
}

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üßæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + stats  ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
function registerUser(userId) {
  userId = String(userId)
  try {
    const users = JSON.parse(fs.readFileSync(usersPath,'utf8'))
    if (!users[userId]) {
      users[userId] = { registered: true, ts: Date.now() }
      fs.writeFileSync(usersPath, JSON.stringify(users,null,2))
      console.log(`üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${userId}`)
    }
  } catch(err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ users.json:', err)
  }
}
function getUserCount() {
  try {
    const users = JSON.parse(fs.readFileSync(usersPath,'utf8'))
    return Object.keys(users).length
  } catch {
    return 0
  }
}

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üì£ –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π            ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
async function broadcastAll(bot, message) {
  let users = {}
  try {
    users = JSON.parse(fs.readFileSync(usersPath,'utf8'))
  } catch {}
  for (const uid of Object.keys(users)) {
    try {
      await bot.sendMessage(uid, message)
    } catch(err) {
      console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${uid}:`, err.response?.body||err)
      if (err.response?.statusCode === 403) {
        delete users[uid]
        console.log(`üóë –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid}`)
      }
    }
  }
  try {
    fs.writeFileSync(usersPath, JSON.stringify(users,null,2))
  } catch{}
}

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JSON-–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ API ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
async function fetchMapStatus() {
  const res = await octokit.repos.getContent({
    owner: GITHUB_OWNER,
    repo:  GITHUB_REPO,
    path:  'map-status.json',
    ref:   GITHUB_BRANCH
  })
  const raw = Buffer.from(res.data.content, 'base64').toString()
  return { sha: res.data.sha, status: JSON.parse(raw) }
}

async function updateMapStatus({ enabled, message, theme='auto', disableUntil }) {
  const { sha } = await fetchMapStatus()
  const newStatus = { enabled, message, theme, disableUntil }
  const content = Buffer.from(JSON.stringify(newStatus,null,2)).toString('base64')
  await octokit.repos.createOrUpdateFileContents({
    owner:   GITHUB_OWNER,
    repo:    GITHUB_REPO,
    path:    'map-status.json',
    message: `üîÑ Update map-status: enabled=${enabled}`,
    content,
    sha,
    branch:  GITHUB_BRANCH
  })
}

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üìã Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–Ω–∏–∑—É        ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
function sendReplyMenu(bot, chatId, uid, text = 'üìã –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —Å–Ω–∏–∑—É:') {
  uid = String(uid)
  const isAdmin = uid === ADMIN_ID
  const userMenu = {
    reply_markup: {
      keyboard: [
        ['üßæ Info','üõ£Ô∏è Roadmap'],
        ['üåê –°—Å—ã–ª–∫–∏','üó∫Ô∏è –ö–∞—Ä—Ç–∞'],
        ['‚ùì –ü–æ–º–æ—â—å']
      ],
      resize_keyboard: true
    }
  }
  const adminMenu = {
    reply_markup: {
      keyboard: [
        ['üßæ Info','üõ£Ô∏è Roadmap'],
        ['üåê –°—Å—ã–ª–∫–∏','üó∫Ô∏è –ö–∞—Ä—Ç–∞'],
        ['‚ùì –ü–æ–º–æ—â—å'],
        ['üì¢ –†–∞—Å—Å—ã–ª–∫–∞','üìÉ –õ–æ–≥–∏'],
        ['‚ö†Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É','üü¢ –í–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É'],
        ['üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞','üìë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤']
      ],
      resize_keyboard: true
    }
  }
  const menu = isAdmin ? adminMenu : userMenu
  bot.sendMessage(chatId, text, menu).catch(console.error)
}

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞  ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
activateBotFlag()
const bot      = new TelegramBot(TOKEN, { polling: true })
let   launched = false

bot.on('error', err =>
  console.error('üí• Telegram API error:', err.code, err.response?.body||err)
)
bot.on('polling_error', err =>
  console.error('üì° Polling error:', err.code, err.response?.body||err)
)

bot.on('message', msg =>
  console.log(`üì® [${msg.chat.id}] ${msg.from.username||'unknown'}: ${msg.text}`)
)

bot.getMe().then(me => {
  console.log(`‚úÖ GENESIS –∞–∫—Ç–∏–≤–µ–Ω –∫–∞–∫ @${me.username}`)
  launched = true
})

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë ‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è              ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

// /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –º–µ–Ω—é
bot.onText(/\/start/, msg => {
  const chatId = msg.chat.id
  const uid    = msg.from.id
  registerUser(uid)
  sendReplyMenu(bot, chatId, uid,
    'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–∏–ª–æ—Ä–¥! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.'
  )
})

// /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ + –º–µ–Ω—é
bot.onText(/\/help/, msg => {
  sendReplyMenu(bot, msg.chat.id, msg.from.id,
    'üìñ –ö–æ–º–∞–Ω–¥—ã:\n' +
    '/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n' +
    '/status ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞\n' +
    '/menu ‚Äî –º–µ–Ω—é —Å–Ω–∏–∑—É\n' +
    '/poweroff, /poweron, /restart ‚Äî –∞–¥–º–∏–Ω'
  )
})

// /status ‚Äî –±–µ–∑ –º–µ–Ω—é
bot.onText(/\/status/, msg => {
  bot.sendMessage(msg.chat.id,
    `üìä –°—Ç–∞—Ç—É—Å:\n` +
    `- –ó–∞–ø—É—â–µ–Ω: ${launched}\n` +
    `- –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: ${isBotEnabled()}\n` +
    `- –Æ–∑–µ—Ä–æ–≤: ${getUserCount()}`
  ).catch(console.error)
})

// /menu ‚Äî –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—é
bot.onText(/\/menu/, msg => {
  sendReplyMenu(bot, msg.chat.id, msg.from.id)
})

// power commands ‚Äî —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
bot.onText(/\/poweroff/, msg => {
  if (String(msg.from.id) === ADMIN_ID) {
    deactivateBotFlag()
    bot.sendMessage(msg.chat.id, 'üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.').then(() => process.exit(0))
  }
})

bot.onText(/\/poweron/, msg => {
  if (String(msg.from.id) === ADMIN_ID) {
    if (!isBotEnabled()) {
      activateBotFlag()
      bot.sendMessage(msg.chat.id, '‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.').catch(console.error)
    } else {
      bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.').catch(console.error)
    }
  }
})

bot.onText(/\/restart/, msg => {
  if (String(msg.from.id) === ADMIN_ID) {
    deactivateBotFlag()
    activateBotFlag()
    bot.sendMessage(msg.chat.id, 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫‚Ä¶').then(() => process.exit(0))
  }
})

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üî≤ –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–æ–∫         ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
const broadcastPending = new Set()
const disablePending   = new Set()

bot.on('message', async msg => {
  const text   = msg.text
  const chatId = msg.chat.id
  const uid    = String(msg.from.id)

  // ‚Äî Broadcast flow (force_reply)
  if (
    broadcastPending.has(uid) &&
    msg.reply_to_message?.text.includes('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
  ) {
    broadcastPending.delete(uid)
    await broadcastAll(bot, text)
    bot.sendMessage(uid, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
      .then(() => sendReplyMenu(bot, chatId, uid))
    return
  }

  // ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (force_reply)
  if (
    disablePending.has(uid) &&
    msg.reply_to_message?.text.includes('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã')
  ) {
    disablePending.delete(uid)

    const disableMsg =
      'üîí Genesis war map –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω.\n' +
      '–ú—ã –≤–∑—è–ª–∏ —Ç–∞–π–º-–∞—É—Ç, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–µ-—á—Ç–æ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–µ.\n' +
      'üìç–°–∫–æ—Ä–æ –≤–∫–ª—é—á–∏–º —Ä–∞–¥–∞—Ä.'

    // –æ–±–Ω–æ–≤–ª—è–µ–º map-status.json –Ω–∞ GitHub
    try {
      await updateMapStatus({
        enabled:       false,
        message:       disableMsg,
        theme:         'auto',
        disableUntil:  new Date().toISOString()
      })
    } catch(err) {
      console.error('üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', err)
      await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É.')
      return sendReplyMenu(bot, chatId, uid)
    }

    // —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await broadcastAll(bot, disableMsg)

    bot.sendMessage(chatId, '‚úÖ –ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.')
      .then(() => sendReplyMenu(bot, chatId, uid))
    return
  }

  // ‚Äî –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  switch (text) {
    case 'üßæ Info':
      bot.sendMessage(chatId, 'üßæ –í–µ—Ä—Å–∏—è: b.1.0.0\nüë®‚Äçüíª –ê–≤—Ç–æ—Ä—ã: Stanford')
      break

    case 'üõ£Ô∏è Roadmap':
      bot.sendMessage(chatId,
        'üõ£Ô∏è Roadmap:\n1. –ó–∞–ø—É—Å–∫\n2. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è\n3. –ù–æ–≤—ã–µ —Ñ–∏—á–∏'
      )
      break

    case 'üåê –°—Å—ã–ª–∫–∏':
      bot.sendMessage(chatId,
        'üß≠ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã Genesis:\n\n' +
        'üèóÔ∏è –°—Ç—Ä–æ–µ–Ω–∏—è –º–∏—Ä–∞:\nhttps://back.genesis-of-ages.space/info/builds.php\n\n' +
        '‚öôÔ∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\nhttps://back.genesis-of-ages.space/info/tech.php\n\n' +
        'üí¨ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç:\nhttps://t.me/gao_chat\n\n' +
        'üéÆ –°–∞–π—Ç –∏–≥—Ä—ã:\nhttps://back.genesis-of-ages.space/game/\n\n' +
        'üîó –ë–æ–ª—å—à–µ —Å–∫–æ—Ä–æ‚Ä¶'
      )
      break

    case 'üó∫Ô∏è –ö–∞—Ä—Ç–∞':
      bot.sendMessage(chatId,
        'üåç –ö–∞—Ä—Ç–∞: https://genesis-data.onrender.com'
      )
      break

    case '‚ùì –ü–æ–º–æ—â—å':
      bot.sendMessage(chatId,
        'üìñ –ü–æ–º–æ—â—å:\n' +
        '- /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n' +
        '- /status ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n' +
        '- /menu ‚Äî –º–µ–Ω—é'
      )
      break

    case 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞':
      if (uid === ADMIN_ID) {
        broadcastPending.add(uid)
        bot.sendMessage(chatId,
          '‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
          { reply_markup: { force_reply: true } }
        )
      }
      break

    case 'üìÉ –õ–æ–≥–∏':
      if (uid === ADMIN_ID) {
        bot.sendMessage(chatId, 'üìÑ –õ–æ–≥–∏: —Ç–∞–π–ª–æ–≤ 344/500, –æ—à–∏–±–æ–∫ 0')
      }
      break

    case '‚ö†Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É':
      if (uid === ADMIN_ID) {
        disablePending.add(uid)
        bot.sendMessage(chatId,
          '‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:',
          { reply_markup: { force_reply: true } }
        )
      }
      break

    case 'üü¢ –í–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É':
      if (uid === ADMIN_ID) {
        const enableMsg = 'üîì Genesis war map —Å–µ–π—á–∞—Å –≤ —ç—Ñ–∏—Ä–µ!'
        try {
          await updateMapStatus({
            enabled:       true,
            message:       enableMsg,
            theme:         'auto',
            disableUntil:  new Date().toISOString()
          })
          await bot.sendMessage(chatId, '‚úÖ –ö–∞—Ä—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞. –í—Å–µ —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.')
        } catch(err) {
          console.error('üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã:', err)
          await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É.')
        }
        sendReplyMenu(bot, chatId, uid)
      }
      break

    case 'üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞':
      if (uid === ADMIN_ID) {
        bot.sendMessage(chatId, 'üë• –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')
      }
      break

    case 'üìë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤':
      if (uid === ADMIN_ID) {
        bot.sendMessage(chatId, `üìë –ê–¥–º–∏–Ω—ã: ${ADMIN_ID}`)
      }
      break
  }
})
