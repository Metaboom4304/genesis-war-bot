// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üß† GENESIS_LAUNCHER ‚Äî Telegram Control   ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const { sendUserMenu, sendAdminMenu } = require('./controlPanel');

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üõ°Ô∏è ENV GUARD: –ó–∞—â–∏—Ç–∞ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã        ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
const requiredEnv = ['TELEGRAM_TOKEN', 'ADMIN_ID'];
let envValid = true;

console.log('\nüß≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GENESIS_LAUNCHER...');
for (const key of requiredEnv) {
  const val = process.env[key];
  if (!val) {
    console.log(`üî¥ ENV –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${key}`);
    envValid = false;
  } else {
    console.log(`üü¢ ${key} –∞–∫—Ç–∏–≤–µ–Ω: ${val.slice(0,6)}...`);
  }
}
if (!envValid) {
  console.log('\n‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞: –∑–∞–¥–∞–π—Ç–µ –≤—Å–µ ENV-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
  process.exit(1);
}

const TOKEN    = process.env.TELEGRAM_TOKEN;
const ADMIN_ID = String(process.env.ADMIN_ID);

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üìÇ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –∫–∞—Ç–∞–ª–æ–≥—É –ø–∞–º—è—Ç–∏      ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
const memoryPath = path.join(__dirname, 'memory');
const usersPath  = path.join(__dirname, 'users.json');
const lockPath   = path.join(memoryPath, 'botEnabled.lock');

// ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
// ‚îÇ üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è        ‚îÇ
// ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
if (!fs.existsSync(memoryPath)) fs.mkdirSync(memoryPath);
if (!fs.existsSync(usersPath))  fs.writeFileSync(usersPath, JSON.stringify({}, null, 2));
if (!fs.existsSync(lockPath))  fs.writeFileSync(lockPath, 'enabled');

function isBotEnabled()   { return fs.existsSync(lockPath); }
function activateBotFlag(){ fs.writeFileSync(lockPath, 'enabled'); }
function deactivateBotFlag(){
  if (fs.existsSync(lockPath)) fs.unlinkSync(lockPath);
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users.json
 */
function registerUser(userId) {
  const raw   = fs.readFileSync(usersPath, 'utf8');
  const users = JSON.parse(raw);
  if (!users[userId]) {
    users[userId] = { registered: true, ts: Date.now() };
    fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
    console.log(`üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${userId}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
 */
function isRegistered(userId) {
  const raw   = fs.readFileSync(usersPath, 'utf8');
  const users = JSON.parse(raw);
  return Boolean(users[userId]);
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function getUserCount() {
  const raw   = fs.readFileSync(usersPath, 'utf8');
  const users = JSON.parse(raw);
  return Object.keys(users).length;
}

/**
 * –†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
 */
function broadcastAll(bot, message) {
  const raw   = fs.readFileSync(usersPath, 'utf8');
  const users = JSON.parse(raw);
  for (const uid of Object.keys(users)) {
    bot.sendMessage(uid, `üì£ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n${message}`);
  }
}

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Bot  ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
activateBotFlag();
const bot = new TelegramBot(TOKEN, { polling: true });
let launched = false;

bot.getMe().then(me => {
  console.log(`‚úÖ GENESIS –∞–∫—Ç–∏–≤–µ–Ω –∫–∞–∫ @${me.username}`);
  launched = true;
});

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë ‚öôÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã            ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
bot.onText(/\/status/, (msg) => {
  bot.sendMessage(msg.chat.id,
    `üìä –°—Ç–∞—Ç—É—Å:\n- –ó–∞–ø—É—â–µ–Ω: ${launched}\n- –ê–∫—Ç–∏–≤–µ–Ω: ${isBotEnabled()}\n- –Æ–∑–µ—Ä–æ–≤: ${getUserCount()}`
  );
});

bot.onText(/\/menu/, (msg) => {
  const uid = msg.from.id;
  sendUserMenu(bot, msg.chat.id);
  sendAdminMenu(bot, msg.chat.id, uid);
});

bot.onText(/\/poweroff/, (msg) => {
  deactivateBotFlag();
  bot.sendMessage(msg.chat.id, 'üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. polling –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è‚Ä¶');
  process.exit();
});

bot.onText(/\/poweron/, (msg) => {
  if (!isBotEnabled()) {
    activateBotFlag();
    bot.sendMessage(msg.chat.id, '‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.');
  } else {
    bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –£–∂–µ –≤–∫–ª—é—á—ë–Ω.');
  }
});

bot.onText(/\/restart/, (msg) => {
  deactivateBotFlag();
  activateBotFlag();
  bot.sendMessage(msg.chat.id, 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ‚Ä¶ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.');
  process.exit();
});

bot.on('polling_error', err =>
  console.error('üì° Polling error:', err.message)
);

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
const broadcastPending = new Set();

bot.on('callback_query', query => {
  const chatId = query.message.chat.id;
  const uid    = String(query.from.id);
  const data   = query.data;

  switch (data) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    case 'start':
      registerUser(uid);
      bot.sendMessage(chatId, '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
      break;

    case 'map':
      if (isRegistered(uid)) {
        bot.sendMessage(chatId, 'üó∫Ô∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É‚Ä¶');
      } else {
        bot.sendMessage(chatId, 'üö´ –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–°—Ç–∞—Ä—Ç¬ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
      }
      break;

    case 'help':
      bot.sendMessage(chatId,
        'üìñ –ü–æ–º–æ—â—å:\n' +
        '- –°—Ç–∞—Ä—Ç: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n' +
        '- –ö–∞—Ä—Ç–∞: –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n' +
        '- –ò–Ω—Ñ–æ, Roadmap, –°—Å—ã–ª–∫–∏'
      );
      break;

    case 'info':
      bot.sendMessage(chatId, 'üßæ –í–µ—Ä—Å–∏—è: 1.0.0\nüë®‚Äçüíª –ê–≤—Ç–æ—Ä—ã: –∫–æ–º–∞–Ω–¥–∞ GENESIS');
      break;

    case 'roadmap':
      bot.sendMessage(chatId,
        'üõ£Ô∏è Roadmap:\n' +
        '1. –ó–∞–ø—É—Å–∫\n' +
        '2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n' +
        '3. –ù–æ–≤—ã–µ —Ñ–∏—á–∏'
      );
      break;

    case 'links':
      bot.sendMessage(chatId, 'üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:\nhttps://example.com');
      break;

    // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    case 'logs':
      if (uid === ADMIN_ID) {
        bot.sendMessage(chatId, 'üìÑ –õ–æ–≥–∏ –∫–∞—Ä—Ç—ã: —Ç–∞–π–ª–æ–≤ 344/500, –æ—à–∏–±–æ–∫ 0');
      }
      break;

    case 'map_enable':
      if (uid === ADMIN_ID) {
        bot.sendMessage(chatId, 'üü¢ –ö–∞—Ä—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞.');
      }
      break;

    case 'map_disable_confirm':
      if (uid === ADMIN_ID) {
        bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:', {
          reply_markup: {
            inline_keyboard: [[
              { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'map_disable_final' }
            ]]
          }
        });
      }
      break;

    case 'map_disable_final':
      if (uid === ADMIN_ID) {
        deactivateBotFlag();
        bot.sendMessage(chatId, 'üõë –ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.');
        broadcastAll(bot,
          '‚õî –ö–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Ö—Ä–∞–±–æ—Ç.\n–°–∫–æ—Ä–æ –≤–µ—Ä–Ω—ë–º—Å—è!'
        );
      }
      break;

    case 'add_admin':
      if (uid === ADMIN_ID) {
        bot.sendMessage(chatId, 'üë§ –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
      }
      break;

    case 'list_admins':
      if (uid === ADMIN_ID) {
        bot.sendMessage(chatId, `üìÉ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π ID ‚Äî ${ADMIN_ID}`);
      }
      break;

    case 'broadcast':
      if (uid === ADMIN_ID) {
        broadcastPending.add(uid);
        bot.sendMessage(chatId,
          '‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
          { reply_markup: { force_reply: true } }
        );
      }
      break;

    default:
      bot.sendMessage(chatId, 'ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.');
  }
});

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ (broadcast)        ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
bot.on('message', msg => {
  const uid = String(msg.from.id);
  if (broadcastPending.has(uid) && msg.reply_to_message?.text.includes('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')) {
    broadcastPending.delete(uid);
    broadcastAll(bot, msg.text);
    bot.sendMessage(uid, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.');
  }
});
