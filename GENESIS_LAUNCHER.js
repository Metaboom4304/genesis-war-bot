// GENESIS_LAUNCHER.js
// ESM-–≤–µ—Ä—Å–∏—è, –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–æ–≥–∏, polling, –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Render

import 'dotenv/config';
import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import { Octokit } from '@octokit/rest';

// -----------------------------
// 0) –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
// -----------------------------
const log = {
  info: (...args) => console.info('[INFO]', ...args),
  warn: (...args) => console.warn('[WARN]', ...args),
  error: (...args) => console.error('[ERROR]', ...args),
  debug: (...args) => console.debug('[DEBUG]', ...args),
};

function maskToken(token) {
  if (!token) return 'MISSING';
  if (token.length <= 8) return '*****';
  return token.slice(0, 4) + '***' + token.slice(-4);
}

// -----------------------------
// 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
// -----------------------------
log.info('ü§ç Checking required environment variables‚Ä¶');

const {
  TELEGRAM_TOKEN,
  ADMIN_ID,
  GITHUB_TOKEN,
  GITHUB_OWNER,
  GITHUB_REPO,
  PORT,
  NODE_ENV,
} = process.env;

const requiredEnv = ['TELEGRAM_TOKEN'];
const missing = requiredEnv.filter((k) => !process.env[k]);

if (missing.length) {
  missing.forEach((name) => log.error(`üî¥ Missing env: ${name}`));
  throw new Error('Missing required environment variables.');
}

// –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç—ã –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
log.info(`üü¢ TELEGRAM_TOKEN OK (${maskToken(TELEGRAM_TOKEN)})`);
if (ADMIN_ID) log.info('üü¢ ADMIN_ID OK');
if (GITHUB_TOKEN) log.info('üü¢ GITHUB_TOKEN OK');
if (GITHUB_OWNER) log.info('üü¢ GITHUB_OWNER OK');
if (GITHUB_REPO) log.info('üü¢ GITHUB_REPO OK');

// -----------------------------
// 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GitHub (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
// -----------------------------
let octokit = null;
if (GITHUB_TOKEN && GITHUB_OWNER && GITHUB_REPO) {
  octokit = new Octokit({ auth: GITHUB_TOKEN });
  log.info('üîó Octokit initialized for GitHub integration');
} else {
  log.warn('‚ÑπÔ∏è GitHub integration not fully configured (optional).');
}

// -----------------------------
// 3) Express (Render-friendly)
// -----------------------------
const app = express();
const APP_PORT = Number(PORT) || 10000;

app.get('/', (_req, res) => {
  res.status(200).send('GENESIS WAR Bot is alive');
});

app.listen(APP_PORT, () => {
  log.info(`üåç Express listening on port ${APP_PORT}`);
});

// -----------------------------
// 4) Telegram Bot (Polling)
// -----------------------------
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

bot.on('polling_error', (err) => {
  log.error('Polling error:', err?.message || err);
});

bot.getMe()
  .then((me) => {
    log.info(`‚úÖ GENESIS active as @${me.username}`);
  })
  .catch((e) => log.error('getMe failed:', e?.message || e));

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram
(async () => {
  try {
    await bot.setMyCommands([
      { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' },
      { command: 'info', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ' },
      { command: 'map', description: '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É (–∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥)' },
    ]);
  } catch (e) {
    log.warn('setMyCommands failed:', e?.message || e);
  }
})();

// –£–¥–æ–±–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function defaultKeyboard() {
  return {
    reply_markup: {
      keyboard: [
        [{ text: 'ü§ñ Info' }, { text: 'üó∫ Map' }],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  };
}

// -----------------------------
// 5) –ö–æ–º–∞–Ω–¥—ã
// -----------------------------
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    await bot.sendMessage(
      chatId,
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GENESIS WAR Bot.\n–ö–æ–º–∞–Ω–¥—ã:\n' +
        '‚Ä¢ /info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n' +
        '‚Ä¢ /map [–∑–∞–ø—Ä–æ—Å] ‚Äî –∫–∞—Ä—Ç–∞/–ø–æ–∏—Å–∫\n\n' +
        '–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',
      defaultKeyboard()
    );
  } catch (e) {
    log.error('Error in /start:', e?.message || e);
  }
});

bot.onText(/\/info/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    const isAdmin = ADMIN_ID && String(msg.from?.id) === String(ADMIN_ID);
    const infoText = [
      'ü§ñ GENESIS WAR Bot',
      `ENV: ${NODE_ENV || 'production'}`,
      `Admin access: ${isAdmin ? 'yes' : 'no'}`,
      octokit ? 'GitHub: connected' : 'GitHub: not configured',
    ].join('\n');

    await bot.sendMessage(chatId, infoText, defaultKeyboard());
  } catch (e) {
    log.error('Error in /info:', e?.message || e);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ /map –∏ /map <—á—Ç–æ-—Ç–æ>
bot.onText(/\/map(?:\s+(.+))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const args = match?.[1]?.trim() || '';
  log.info('Map command received', { args });

  try {
    if (!args) {
      await bot.sendMessage(
        chatId,
        '–£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä—ã:\n' +
          '‚Ä¢ /map Berlin\n' +
          '‚Ä¢ /map Tokyo',
        defaultKeyboard()
      );
      return;
    }

    // –ó–¥–µ—Å—å —Ç–≤–æ—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∫–∞—Ä—Ç—ã.
    // –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–º —ç—Ö–æ-–æ—Ç–≤–µ—Ç:
    await bot.sendMessage(chatId, `üó∫ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç—É: ${args}`, defaultKeyboard());
  } catch (e) {
    log.error('Error in /map:', e?.message || e);
  }
});

// -----------------------------
// 6) –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
// -----------------------------
bot.on('message', async (msg) => {
  if (!msg.text) return;
  const chatId = msg.chat.id;
  const text = msg.text.trim();

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  if (text === 'ü§ñ Info' || /^info$/i.test(text)) {
    return bot.emit('text', { ...msg, text: '/info' });
  }
  if (text === 'üó∫ Map' || /^map$/i.test(text)) {
    // –ü—Ä–µ–¥–ª–æ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    try {
      await bot.sendMessage(
        chatId,
        '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /map <–≥–æ—Ä–æ–¥/–∑–∞–ø—Ä–æ—Å>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /map Berlin',
        defaultKeyboard()
      );
    } catch (e) {
      log.error('Error in Map button response:', e?.message || e);
    }
    return;
  }
});

// -----------------------------
// 7) GitHub ‚Äî –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
// -----------------------------
async function exampleGitHubPing() {
  if (!octokit) return;
  try {
    // –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    const { data } = await octokit.repos.get({
      owner: GITHUB_OWNER,
      repo: GITHUB_REPO,
    });
    log.info('GitHub repo ok:', {
      full_name: data.full_name,
      private: data.private,
      default_branch: data.default_branch,
    });
  } catch (e) {
    log.warn('GitHub check failed:', e?.message || e);
  }
}
exampleGitHubPing();

// -----------------------------
// 8) –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ª–æ–≤—É—à–∫–∏ –æ—à–∏–±–æ–∫
// -----------------------------
process.on('unhandledRejection', (reason) => {
  log.error('unhandledRejection:', reason?.message || reason);
});
process.on('uncaughtException', (err) => {
  log.error('uncaughtException:', err?.message || err);
});

// –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
log.info('üöÄ TelegramBot instance created, polling started');
