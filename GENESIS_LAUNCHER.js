import 'dotenv/config';
import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { Pool } from 'pg';
// Supabase
import { createClient } from '@supabase/supabase-js';

// -----------------------------
// ENV –ø—Ä–æ–≤–µ—Ä–∫–∞ (—É–±—Ä–∞–Ω API_URL)
// -----------------------------
const requiredEnv = ['TELEGRAM_TOKEN', 'DATABASE_URL', 'ADMIN_ID'];
for (const key of requiredEnv) {
  if (!process.env[key]) {
    console.error(`üî¥ Missing ENV: ${key}`);
    process.exit(1);
  }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –º–µ—Ç–æ–∫)
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false // ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è Supabase
  }
});

// -----------------------------
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase (–¥–ª—è –∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞)
// -----------------------------
const supabase = createClient(
  'https://vbcnhpsavynwzopvdqcw.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZiY25ocHNhdnlud3pvcHZkcWN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxODM2OTMsImV4cCI6MjA3NDc1OTY5M30.84WBqv1cEpasCrxoqzNpC5FPhciRHphPGJxhFIcMCmE'
);

// -----------------------------
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏
// -----------------------------
const TOKEN         = process.env.TELEGRAM_TOKEN;
const BOT_PORT      = process.env.BOT_PORT || process.env.PORT || 10001;
const MAP_URL       = process.env.MAP_URL || 'https://genesis-data.onrender.com';
const ADMIN_ID      = parseInt(process.env.ADMIN_ID) || null;

const __filename   = fileURLToPath(import.meta.url);
const __dirname    = dirname(__filename);

// -----------------------------
// Express keep-alive
// -----------------------------
const app = express();
app.use(express.json());

app.get('/health', (_req, res) => {
  res.status(200).json({ 
    status: 'ok', 
    service: 'genesis-war-bot',
    timestamp: new Date().toISOString()
  });
});

app.get('/', (_req, res) => res.send('ü§ñ GENESIS bot is alive!'));

const server = app.listen(BOT_PORT, '0.0.0.0', () => console.log(`üåç Express (keep-alive) listening on port ${BOT_PORT}`));
setInterval(() => console.log('üíì Bot heartbeat ‚Äì still alive'), 60_000);

// -----------------------------
// Telegram Bot
// -----------------------------
const bot = new TelegramBot(TOKEN, { 
  polling: {
    interval: 300,
    autoStart: true,
    params: {
      timeout: 60,
    }
  }
});

bot.getMe()
  .then(me => console.log(`‚úÖ GENESIS bot active as @${me.username}`))
  .catch(console.error);

// -----------------------------
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// -----------------------------
const users = new Map();

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function loadUsers() {
  try {
    const result = await pool.query('SELECT * FROM users');
    result.rows.forEach(user => {
      users.set(user.id.toString(), {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        username: user.username,
        language_code: user.language_code,
        created_at: user.created_at,
        registered: true
      });
    });
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(userId, firstName, lastName, username, languageCode) {
  try {
    await pool.query(`
      INSERT INTO users (id, first_name, last_name, username, language_code)
      VALUES ($1, $2, $3, $4, $5)
      ON CONFLICT (id) 
      DO UPDATE SET
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name,
        username = EXCLUDED.username,
        language_code = EXCLUDED.language_code
    `, [userId, firstName, lastName || null, username || null, languageCode || 'ru']);
    
    users.set(userId.toString(), {
      id: userId,
      first_name: firstName,
      last_name: lastName,
      username: username,
      language_code: languageCode,
      created_at: new Date(),
      registered: true
    });
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return false;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞
function generateAccessCode() {
  return Math.floor(100000 + Math.random() * 900000).toString().substring(0, 6);
}

// -----------------------------
// –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
// -----------------------------

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
function isAdmin(userId) {
  return ADMIN_ID && userId === ADMIN_ID;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getUsersStats() {
  try {
    const totalResult = await pool.query('SELECT COUNT(*) as count FROM users');
    const totalUsers = parseInt(totalResult.rows[0].count, 10);
    
    const activeResult = await pool.query(`
      SELECT COUNT(*) as count 
      FROM users 
      WHERE created_at >= NOW() - INTERVAL '1 day'
    `);
    const activeUsers = parseInt(activeResult.rows[0].count, 10);
    
    const weeklyResult = await pool.query(`
      SELECT COUNT(*) as count 
      FROM users 
      WHERE created_at >= NOW() - INTERVAL '7 days'
    `);
    const weeklyUsers = parseInt(weeklyResult.rows[0].count, 10);
    
    return {
      total: totalUsers,
      active24h: activeUsers,
      active7d: weeklyUsers
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    return { total: 0, active24h: 0, active7d: 0 };
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å –ë–î –∏ –±–æ—Ç–æ–º (API –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è)
async function checkConnections() {
  const results = {
    database: { status: '‚ùå', message: '' },
    api: { status: '‚úÖ', message: 'API: –≠–º—É–ª—è—Ü–∏—è (OK)' }, // –≠–º—É–ª—è—Ü–∏—è
    bot: { status: '‚ùå', message: '' }
  };
  
  try {
    const dbStart = Date.now();
    const dbResult = await pool.query('SELECT 1 as test');
    const dbTime = Date.now() - dbStart;
    results.database = { 
      status: '‚úÖ', 
      message: `–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK (${dbTime}ms)`
    };
  } catch (error) {
    results.database = { 
      status: '‚ùå', 
      message: `–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ERROR - ${error.message}`
    };
  }
  
  try {
    const botInfo = await bot.getMe();
    results.bot = { 
      status: '‚úÖ', 
      message: `–ë–æ—Ç: OK (@${botInfo.username})`
    };
  } catch (error) {
    results.bot = { 
      status: '‚ùå', 
      message: `–ë–æ—Ç: ERROR - ${error.message}`
    };
  }
  
  return results;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ –±–æ—Ç‚ÄìAPI (—ç–º—É–ª—è—Ü–∏—è)
let botApiHealthCache = {
  data: null,
  timestamp: 0
};
const BOT_API_HEALTH_CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ (API –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
async function checkBotApiConnection() {
  const now = Date.now();
  if (botApiHealthCache.data && (now - botApiHealthCache.timestamp < BOT_API_HEALTH_CACHE_TTL)) {
    console.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç bot-API —Å–≤—è–∑–∏ (–∏–∑ –∫–µ—à–∞)');
    return botApiHealthCache.data;
  }

  // –≠–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
  const mockResponse = {
    status: 'ok',
    service: 'genesis-war-bot',
    database: 'connected',
    timestamp: new Date().toISOString(),
    cached: false
  };

  botApiHealthCache = {
    data: mockResponse,
    timestamp: now
  };
  
  return mockResponse;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getUsersList(limit = 50) {
  try {
    const result = await pool.query(`
      SELECT id, first_name, last_name, username, created_at 
      FROM users 
      ORDER BY created_at DESC 
      LIMIT $1
    `, [limit]);
    
    return result.rows;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    return [];
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function sendAdminPanel(chatId) {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
          { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑–∏', callback_data: 'admin_check' }
        ],
        [
          { text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'admin_users' },
          { text: 'ü§ñ –ë–æ—Ç-API —Å–≤—è–∑—å', callback_data: 'admin_bot_api' }
        ],
        [
          { text: 'üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥', callback_data: 'get_code' },
          { text: 'üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', callback_data: 'open_map' }
        ],
        [
          { text: 'üêõ –¢–µ—Å—Ç API', callback_data: 'test_api' },
          { text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    }
  };
  
  const message = `üõ† *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  bot.sendMessage(chatId, message, { 
    parse_mode: 'Markdown',
    ...keyboard 
  }).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', error);
  });
}

// -----------------------------
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
// -----------------------------

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const firstName = msg.from.first_name;
  const lastName = msg.from.last_name || '';
  const username = msg.from.username || '';
  const languageCode = msg.from.language_code || 'ru';
  
  console.log(`üîÑ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (@${username})`);
  
  await registerUser(userId, firstName, lastName, username, languageCode);
  
  sendMainMenu(chatId, userId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /code
bot.onText(/\/code/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  console.log(`üîë –ö–æ–º–∞–Ω–¥–∞ /code –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  sendAccessCode(chatId, userId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
bot.onText(/\/admin/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  console.log(`üõ† –ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  if (!isAdmin(userId)) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
    return;
  }
  
  sendAdminPanel(chatId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /map
bot.onText(/\/map/, async (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, `üåê –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:\n${MAP_URL}`, {
    reply_markup: {
      inline_keyboard: [
        [{
          text: 'üó∫ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–µ',
          url: MAP_URL
        }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users
bot.onText(/\/users/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (!isAdmin(userId)) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    return;
  }
  
  try {
    const stats = await getUsersStats();
    
    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n`;
    message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}\n`;
    message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: ${stats.active24h}\n`;
    message += `üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7–¥: ${stats.active7d}\n\n`;
    message += `_–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /users_`;
    
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  if (text.startsWith('/')) return;
  
  console.log(`üì® –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}: ${text}`);
  
  if (text === 'üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞') {
    sendAccessCode(chatId, userId);
  } else if (text === 'üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É') {
    bot.sendMessage(chatId, `üåê –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:\n${MAP_URL}`, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: 'üó∫ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–µ',
            url: MAP_URL
          }]
        ]
      }
    });
  } else if (text === 'üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' && isAdmin(userId)) {
    sendAdminPanel(chatId);
  }
});

// -----------------------------
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
// -----------------------------
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const messageId = query.message.message_id;
  const data = query.data;
  
  console.log(`üîÑ Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${data}`);
  
  try {
    await bot.answerCallbackQuery(query.id);
    
    if (data === 'get_code') {
      await sendAccessCode(chatId, userId);
    } else if (data === 'open_map') {
      bot.sendMessage(chatId, `üåê –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:\n${MAP_URL}`, {
        reply_markup: {
          inline_keyboard: [
            [{
              text: 'üó∫ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–µ',
              url: MAP_URL
            }]
          ]
        }
      });
    } else if (data === 'main_menu') {
      sendMainMenu(chatId, userId);
    } else if (data === 'test_api') {
      if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
      }
      
      // –≠–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∞ API
      bot.editMessageText(`üîß *–¢–µ—Å—Ç API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\n–í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ API –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
            ]
          ]
        }
      });
    }
    
    else if (data.startsWith('admin_')) {
      if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
      }
      
      if (data === 'admin_stats') {
        const stats = await getUsersStats();
        
        let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n`;
        message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}\n`;
        message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: ${stats.active24h}\n`;
        message += `üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7–¥: ${stats.active7d}\n\n`;
        message += `_–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${new Date().toLocaleString('ru-RU')}_`;
        
        bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_stats' },
                { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑–∏', callback_data: 'admin_check' }
              ],
              [
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
              ]
            ]
          }
        });
      }
      else if (data === 'admin_check') {
        const connections = await checkConnections();
        
        let message = `üîç *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π:*\n\n`;
        message += `${connections.database.status} ${connections.database.message}\n`;
        message += `${connections.api.status} ${connections.api.message}\n`;
        message += `${connections.bot.status} ${connections.bot.message}\n\n`;
        message += `_–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}_`;
        
        bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
                { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'admin_check' }
              ],
              [
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
              ]
            ]
          }
        });
      }
      else if (data === 'admin_users') {
        const usersList = await getUsersList(20);
        
        let message = `üë• *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n`;
        
        if (usersList.length === 0) {
          message += `–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`;
        } else {
          usersList.forEach((user, index) => {
            const username = user.username ? `@${user.username}` : '–Ω–µ—Ç username';
            const date = new Date(user.created_at).toLocaleDateString('ru-RU');
            message += `${index + 1}. ${user.first_name} ${user.last_name || ''} (${username}) - ${date}\n`;
          });
        }
        
        message += `\n_–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersList.length}_`;
        
        bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
                { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑–∏', callback_data: 'admin_check' }
              ],
              [
                { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'admin_users' },
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
              ]
            ]
          }
        });
      }
      else if (data === 'admin_bot_api') {
        const connectionStatus = await checkBotApiConnection();
        
        let message = `ü§ñ *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –ë–æ—Ç-API:*\n\n`;
        message += `üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleString('ru-RU')}\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ‚úÖ OK\n`;
        message += `üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: connected\n`;
        message += `‚è±Ô∏è –û—Ç–≤–µ—Ç: —ç–º—É–ª—è—Ü–∏—è\n`;
        
        bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'admin_bot_api' },
                { text: 'üîç –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞', callback_data: 'admin_check' }
              ],
              [
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
              ]
            ]
          }
        });
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    try {
      await bot.answerCallbackQuery(query.id, { text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback:', e);
    }
  }
});

// -----------------------------
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// -----------------------------

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function sendMainMenu(chatId, userId) {
  const keyboardButtons = [
    ['üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞', 'üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É']
  ];
  
  if (isAdmin(userId)) {
    keyboardButtons.push(['üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']);
  }
  
  const keyboard = {
    reply_markup: {
      keyboard: keyboardButtons,
      resize_keyboard: true,
      one_time_keyboard: false
    }
  };
  
  let message = `üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GENESIS WAR MAP!\n\n`;
  message += `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ.`;
  
  if (isAdmin(userId)) {
    message += `\n\nüëë –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`;
  }
  
  bot.sendMessage(chatId, message, keyboard).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
  });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞ - –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø (–Ω–∞–ø—Ä—è–º—É—é –≤ Supabase)
async function sendAccessCode(chatId, userId) {
  try {
    const code = generateAccessCode();
    console.log(`üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${code}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –Ω–∞–ø—Ä—è–º—É—é –≤ Supabase
    const { error } = await supabase
      .from('access_codes')
      .insert({
        code: code,
        user_id: userId
      });

    if (error) throw error;

    const message = `üîë *–í–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ:*\n\n` +
                   `\`${code}\`\n\n` +
                   `*–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.*\n\n` +
                   `1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—ã—à–µ\n` +
                   `2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∫–∞—Ä—Ç—ã\n` +
                   `3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞\n\n` +
                   `üåê *–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É:* ${MAP_URL}`;

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥', callback_data: 'get_code' }],
          [{ text: 'üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', url: MAP_URL }]
        ]
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
    let errorMessage = '‚ùå *–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    if (error.message.includes('429')) {
      errorMessage = '‚ùå *–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤*\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ 1‚Äì2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
    }
    await bot.sendMessage(chatId, errorMessage, { 
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'get_code' }]
        ]
      }
    });
    if (isAdmin(userId)) {
      await bot.sendMessage(chatId, `üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n\`${error.message}\``, {
        parse_mode: 'Markdown'
      });
    }
  }
}

// -----------------------------
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
// -----------------------------
bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ Telegram Bot:', error);
});

bot.on('polling_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö polling
  setTimeout(() => {
    console.log('üîÑ Restarting bot polling...');
    bot.startPolling().catch(err => {
      console.error('‚ùå Failed to restart polling:', err);
    });
  }, 10000);
});

// -----------------------------
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
// -----------------------------
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

// -----------------------------
// Graceful shutdown
// -----------------------------
async function cleanUp() {
  console.log('üõë Received shutdown signal, stopping services‚Ä¶');
  try {
    await bot.stopPolling();
    console.log('‚úÖ Bot polling stopped');
  } catch (err) {
    console.error('‚ùå Error stopping bot:', err);
  }
  
  try {
    server.close(() => {
      console.log('‚úÖ Express server closed');
    });
  } catch (err) {
    console.error('‚ùå Error closing server:', err);
  }
  
  try {
    await pool.end();
    console.log('‚úÖ Database pool closed');
  } catch (err) {
    console.error('‚ùå Error closing database pool:', err);
  }
  
  process.exit(0);
}

process.on('SIGINT', cleanUp);
process.on('SIGTERM', cleanUp);

// -----------------------------
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
// -----------------------------
(async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    console.log('üîå Testing database connection...');
    const dbTest = await pool.query('SELECT NOW() as time');
    console.log('‚úÖ Database connection OK:', dbTest.rows[0].time);
    
    await loadUsers();
    
    console.log('‚úÖ Bot initialized successfully');
    console.log(`üëë Admin: ${ADMIN_ID || 'not set'}`);
    console.log(`üó∫ Map: ${MAP_URL}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
})();
