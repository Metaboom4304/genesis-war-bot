// ============================
// GENESIS_LAUNCHER.js (ESM)
// ============================
import 'dotenv/config';
import fs from 'fs';
import path from 'path';
import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import { Octokit } from '@octokit/rest';
import { fileURLToPath, pathToFileURL } from 'url';

// –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ä–µ–≥–µ–∫—Å-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî –ø–æ–¥–∫–ª—é—á–∏–º –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
let setupBroadcastRegex = null;
try {
  const mod = await import('./commands/broadcast_type.js');
  setupBroadcastRegex = mod.setupBroadcastRegex || null;
} catch {
  // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
}

// -----------------------------
// ENV –ø—Ä–æ–≤–µ—Ä–∫–∞
// -----------------------------
const requiredEnv = ['TELEGRAM_TOKEN', 'ADMIN_ID', 'GITHUB_TOKEN', 'GITHUB_OWNER', 'GITHUB_REPO'];
for (const key of requiredEnv) {
  if (!process.env[key]) {
    console.error(`üî¥ Missing ENV: ${key}`);
    process.exit(1);
  }
}

// -----------------------------
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏
// -----------------------------
const TOKEN         = process.env.TELEGRAM_TOKEN;
const ADMIN_ID      = String(process.env.ADMIN_ID);
const GITHUB_TOKEN  = process.env.GITHUB_TOKEN;
const GITHUB_OWNER  = process.env.GITHUB_OWNER;
const GITHUB_REPO   = process.env.GITHUB_REPO;
const GITHUB_BRANCH = process.env.GITHUB_BRANCH || 'main';
const PORT          = process.env.PORT || 10000;

const __filename   = fileURLToPath(import.meta.url);
const __dirname    = path.dirname(__filename);
const memoryPath   = path.join(__dirname, 'memory');
const usersPath    = path.join(__dirname, 'users.json');
const lockPath     = path.join(memoryPath, 'botEnabled.lock');
const logsPath     = path.join(__dirname, 'logs.txt');
const commandsPath = path.join(__dirname, 'commands');
const pidPath      = path.join(memoryPath, 'genesis.lock');
const aliasesPath  = path.join(__dirname, 'aliases.json');

// -----------------------------
// –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
// -----------------------------
if (!fs.existsSync(memoryPath)) fs.mkdirSync(memoryPath, { recursive: true });

if (fs.existsSync(pidPath)) {
  const oldPid = fs.readFileSync(pidPath, 'utf8');
  try {
    process.kill(Number(oldPid), 0);
    console.error(`‚õî Genesis already running (PID ${oldPid})`);
    process.exit(1);
  } catch {
    fs.unlinkSync(pidPath);
    console.warn('‚ö†Ô∏è –°—Ç–∞—Ä—ã–π PID –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫');
  }
}
fs.writeFileSync(pidPath, String(process.pid));

// -----------------------------
// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤
// -----------------------------
for (const p of [commandsPath]) {
  if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true });
}
if (!fs.existsSync(usersPath)) fs.writeFileSync(usersPath, '{}');
if (!fs.existsSync(lockPath)) fs.writeFileSync(lockPath, 'enabled');
if (!fs.existsSync(logsPath)) fs.writeFileSync(logsPath, '');

// -----------------------------
// –ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –≤ —Ñ–∞–π–ª + –∫–æ–Ω—Å–æ–ª—å
// -----------------------------
function writeLog(level, message, meta = null) {
  const time = new Date().toISOString();
  const line = `${time} [${level}] ${message}${meta ? ' ' + JSON.stringify(meta) : ''}\n`;
  try { fs.appendFileSync(logsPath, line); } catch {}
  const out = level === 'ERROR' ? console.error : level === 'WARN' ? console.warn : console.log;
  out(line.trim());
}
const logger = {
  info:  (m, meta) => writeLog('INFO',  m, meta),
  warn:  (m, meta) => writeLog('WARN',  m, meta),
  error: (m, meta) => writeLog('ERROR', m, meta),
  debug: (m, meta) => writeLog('DEBUG', m, meta)
};

// -----------------------------
// –§–ª–∞–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
// -----------------------------
function isBotEnabled() { return fs.existsSync(lockPath); }
function activateBotFlag() { fs.writeFileSync(lockPath, 'enabled'); }
function deactivateBotFlag() { if (fs.existsSync(lockPath)) fs.unlinkSync(lockPath); }

// -----------------------------
// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
// -----------------------------
function readUsers() {
  try { return JSON.parse(fs.readFileSync(usersPath, 'utf8')); }
  catch { return {}; }
}
function saveUsers(users) {
  try { fs.writeFileSync(usersPath, JSON.stringify(users, null, 2)); } catch {}
}
function registerUser(userId) {
  const uid = String(userId);
  const users = readUsers();
  if (!users[uid]) {
    users[uid] = { registered: true, ts: Date.now() };
    saveUsers(users);
    console.log(`üë§ Registered user: ${uid}`);
  }
}
function getUserCount() {
  return Object.keys(readUsers()).length;
}

// -----------------------------
// GitHub: —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç—ã
// -----------------------------
const octokit = new Octokit({ auth: GITHUB_TOKEN });

async function fetchMapStatus() {
  try {
    const res = await octokit.rest.repos.getContent({
      owner: GITHUB_OWNER,
      repo:  GITHUB_REPO,
      path:  'map-status.json',
      ref:   GITHUB_BRANCH
    });
    const raw = Buffer.from(res.data.content, 'base64').toString('utf8');
    return { sha: res.data.sha, status: JSON.parse(raw) };
  } catch (err) {
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω ‚Äî –≤–µ—Ä–Ω—ë–º –¥–µ—Ñ–æ–ª—Ç
    logger.warn('map-status.json not found, using defaults');
    return {
      sha: undefined,
      status: { enabled: true, message: 'üó∫ –ö–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞.', theme: 'auto', disableUntil: null }
    };
  }
}

async function updateMapStatus({ enabled, message, theme = 'auto', disableUntil = null }) {
  const { sha, status: current } = await fetchMapStatus().catch(() => ({ sha: undefined, status: {} }));
  const newStatus = {
    enabled: enabled ?? current?.enabled ?? true,
    message: message ?? current?.message ?? '',
    theme:   theme   ?? current?.theme   ?? 'auto',
    disableUntil
  };
  const contentBase64 = Buffer.from(JSON.stringify(newStatus, null, 2)).toString('base64');

  await octokit.rest.repos.createOrUpdateFileContents({
    owner:   GITHUB_OWNER,
    repo:    GITHUB_REPO,
    path:    'map-status.json',
    message: `üîÑ Update map-status: enabled=${newStatus.enabled}`,
    content: contentBase64,
    sha,
    branch:  GITHUB_BRANCH
  });
  return newStatus;
}

// -----------------------------
// –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
// -----------------------------
async function broadcastAll(bot, message) {
  const users = readUsers();
  const ids = Object.keys(users);
  let sent = 0;
  for (const uid of ids) {
    try {
      await bot.sendMessage(uid, message);
      sent++;
    } catch (err) {
      console.error(`‚ö†Ô∏è Cannot send to ${uid}:`, err.response?.body || err.message);
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚Äî —É–¥–∞–ª–∏–º
      if (err.response?.statusCode === 403) {
        delete users[uid];
        console.log(`üóëÔ∏è Removed user ${uid}`);
      }
    }
  }
  saveUsers(users);
  console.log(`üì§ Broadcast finished: ${sent}/${ids.length}`);
  return { sent, total: ids.length };
}

// -----------------------------
// Reply-–º–µ–Ω—é
// -----------------------------
function sendReplyMenu(bot, chatId, uid, text = 'üìã Menu:') {
  const isAdmin = String(uid) === ADMIN_ID;
  const baseButtons = [
    ['ü§ñ Info', 'üõ£ Roadmap'],
    ['üåê Links', 'üó∫ Map'],
    ['‚ùì Help']
  ];
  const adminButtons = [
    ['üì¢ Broadcast', 'üìÉ Logs'],
    ['‚ö†Ô∏è Disable map', 'üîÑ Enable map'],
    ['üë• Add admin', 'üìë Admins']
  ];
  const keyboard = isAdmin ? [...baseButtons, ...adminButtons] : baseButtons;

  return bot.sendMessage(chatId, text, {
    reply_markup: { keyboard, resize_keyboard: true }
  }).catch(console.error);
}

// -----------------------------
// Express keep-alive
// -----------------------------
const app = express();
app.get('/', (_req, res) => res.send('ü§ñ GENESIS bot is alive!'));
app.listen(PORT, () => console.log(`üåç Express listening on port ${PORT}`));
setInterval(() => console.log('üíì Bot heartbeat ‚Äì still alive'), 60_000);

// -----------------------------
// Telegram Bot
// -----------------------------
activateBotFlag();
const bot = new TelegramBot(TOKEN, { polling: true });

bot.getMe()
  .then(me => console.log(`‚úÖ GENESIS active as @${me.username}`))
  .catch(console.error);

// -----------------------------
// –ö–æ–º–∞–Ω–¥—ã: –∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
// -----------------------------
const commands = new Map();

try {
  const list = fs.readdirSync(commandsPath);
  console.log('üìÇ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ commands:', list);
} catch (err) {
  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É commands:', err);
}

let commandFiles = [];
try {
  commandFiles = fs.readdirSync(commandsPath).filter(f => f.endsWith('.js'));
} catch {
  commandFiles = [];
}

for (const file of commandFiles) {
  const filepath = path.join(commandsPath, file);
  try {
    // –î–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º file://
    const fileUrl = pathToFileURL(filepath).href;
    const { default: command } = await import(fileUrl);

    if (!command?.name || typeof command.execute !== 'function') {
      console.warn(`‚ö†Ô∏è Skip ${file}: invalid command shape`, command);
      continue;
    }
    const normName = command.name.toLowerCase().replace(/[^a-z–∞-—è0-9]/gi, '');
    commands.set(normName, command);
    console.log(`‚úÖ Loaded command: ${command.name} (${file}) => key: ${normName}`);
  } catch (err) {
    console.error(`‚ùå Failed to load ${file}:`, err);
  }
}

// -----------------------------
// –ê–ª–∏–∞—Å—ã
// -----------------------------
let aliases = {};
try {
  aliases = JSON.parse(fs.readFileSync(aliasesPath, 'utf8'));
  console.log('üîó Aliases loaded');
} catch {
  console.warn('‚ö†Ô∏è aliases.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∞–ª–∏–∞—Å–æ–≤');
}

function resolveCommandKey(input) {
  if (!input) return '';
  const cleaned = input.toLowerCase().replace(/[^a-z–∞-—è0-9]/gi, '');

  // 1) –ê–ª–∏–∞—Å—ã
  for (const [key, variants] of Object.entries(aliases)) {
    if (cleaned === key || (Array.isArray(variants) && variants.includes(cleaned))) return key;
  }
  // 2) –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
  if (commands.has(cleaned)) return cleaned;
  // 3) –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
  for (const key of commands.keys()) {
    if (cleaned.startsWith(key)) return key;
  }
  return cleaned;
}

// -----------------------------
// Broadcast Regex (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
// -----------------------------
if (typeof setupBroadcastRegex === 'function') {
  try {
    setupBroadcastRegex(bot, [Number(ADMIN_ID)], { usersPath });
    console.log('üì¢ Broadcast regex handler set up');
  } catch (err) {
    console.warn('‚ö†Ô∏è setupBroadcastRegex failed:', err.message);
  }
} else {
  console.log('‚ÑπÔ∏è setupBroadcastRegex not available ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
}

// -----------------------------
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
// -----------------------------
const broadcastPending = new Set();
const disablePending   = new Set();

// –ì–ª–æ–±–∞–ª—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
Object.assign(globalThis, {
  ADMIN_ID,
  GITHUB_OWNER,
  GITHUB_REPO,
  GITHUB_BRANCH,
  sendReplyMenu,
  fetchMapStatus,
  updateMapStatus,
  broadcastAll,
  isBotEnabled,
  getUserCount,
  registerUser,
  logsPath,
  usersPath,
  broadcastPending,
  disablePending,
  logger
});

bot.on('message', async (msg) => {
  const text   = (msg.text || '').trim();
  const chatId = msg.chat.id;
  const uid    = String(msg.from.id);

  const cmdKey = resolveCommandKey(text);

  // –û—Ç–ª–∞–¥–∫–∞
  console.log('RAW TEXT:', text);
  console.log('CMD KEY:', cmdKey);
  console.log('ALL COMMANDS:', Array.from(commands.keys()));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏
  if (
    broadcastPending.has(uid) &&
    msg.reply_to_message?.text?.includes('Write broadcast text')
  ) {
    broadcastPending.delete(uid);
    await broadcastAll(bot, text);
    await bot.sendMessage(uid, '‚úÖ Broadcast sent.');
    return sendReplyMenu(bot, chatId, uid);
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
  if (
    disablePending.has(uid) &&
    msg.reply_to_message?.text?.includes('Confirm disabling map')
  ) {
    disablePending.delete(uid);
    const disableMsg = 'üîí Genesis temporarily disabled.\nWe‚Äôll be back soon with something big.';
    try {
      await updateMapStatus({
        enabled: false,
        message: disableMsg,
        theme:   'auto',
        disableUntil: null
      });
      await broadcastAll(bot, disableMsg);
      await bot.sendMessage(chatId, '‚úÖ Map disabled and everyone notified.');
    } catch (err) {
      console.error('üõë Disable error:', err);
      await bot.sendMessage(chatId, '‚ùå Failed to disable map.');
    }
    return sendReplyMenu(bot, chatId, uid);
  }

  // /start
  if (cmdKey === 'start' || text === '/start') {
    registerUser(uid);
    return sendReplyMenu(bot, chatId, uid, 'üöÄ Welcome! You\'re registered.');
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã
  if (commands.has(cmdKey)) {
    try {
      await commands.get(cmdKey).execute(bot, msg);
    } catch (err) {
      console.error(`‚ùå Command ${cmdKey} failed:`, err);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
    }
    return;
  }

  // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é/–ø–æ–¥—Å–∫–∞–∑–∫—É
  // await bot.sendMessage(chatId, '‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –Ω–∏–∂–µ.');
  // return sendReplyMenu(bot, chatId, uid);
});

// -----------------------------
// Graceful shutdown
// -----------------------------
async function cleanUp() {
  console.log('üõë Received shutdown signal, stopping bot‚Ä¶');
  try {
    await bot.stopPolling();
    console.log('‚úÖ Polling stopped.');
  } catch (err) {
    console.error('‚ùå Error during stopPolling:', err);
  }
  try {
    if (fs.existsSync(pidPath)) fs.unlinkSync(pidPath);
    console.log('üßπ PID lock removed.');
  } catch {}
  process.exit(0);
}
process.on('SIGINT', cleanUp);
process.on('SIGTERM', cleanUp);

// -----------------------------
// Watchdog –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ polling
// -----------------------------
setInterval(async () => {
  try {
    const isPolling = typeof bot.isPolling === 'function' ? bot.isPolling() : true;
    if (!isPolling) {
      console.warn('‚ö†Ô∏è Polling stopped unexpectedly, restarting‚Ä¶');
      await bot.startPolling();
      console.log('üîÑ Polling restarted');
    }
  } catch (err) {
    console.error('‚ùå Failed to restart polling:', err);
  }
}, 30_000);
