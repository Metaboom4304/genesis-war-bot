// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üß† GENESIS_LAUNCHER ‚Äî Telegram Control   ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üõ°Ô∏è ENV GUARD: –ó–∞—â–∏—Ç–∞ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã        ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
const requiredEnv = ['TELEGRAM_TOKEN', 'ADMIN_ID'];
let envValid = true;

console.log('\nüß≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GENESIS_LAUNCHER...');
for (const key of requiredEnv) {
  const val = process.env[key];
  if (!val) {
    console.log(`üî¥ ENV –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${key}`);
    envValid = false;
  } else {
    console.log(`üü¢ ${key} –∞–∫—Ç–∏–≤–µ–Ω: ${val.slice(0,6)}...`);
  }
}
if (!envValid) {
  console.log('\n‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞: –∑–∞–¥–∞–π—Ç–µ –≤—Å–µ ENV-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
  process.exit(1);
}

const TOKEN    = process.env.TELEGRAM_TOKEN;
const ADMIN_ID = String(process.env.ADMIN_ID);

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üìÇ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –∫–∞—Ç–∞–ª–æ–≥—É –ø–∞–º—è—Ç–∏      ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
const memoryPath = path.join(__dirname, 'memory');
const usersPath  = path.join(__dirname, 'users.json');
const lockPath   = path.join(memoryPath, 'botEnabled.lock');

// ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
// ‚îÇ üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è        ‚îÇ
// ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
if (!fs.existsSync(memoryPath)) fs.mkdirSync(memoryPath);
if (!fs.existsSync(usersPath))  fs.writeFileSync(usersPath, JSON.stringify({}, null, 2));
if (!fs.existsSync(lockPath))  fs.writeFileSync(lockPath, 'enabled');

function isBotEnabled()   { return fs.existsSync(lockPath); }
function activateBotFlag(){ fs.writeFileSync(lockPath, 'enabled'); }
function deactivateBotFlag(){
  if (fs.existsSync(lockPath)) fs.unlinkSync(lockPath);
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users.json
 */
function registerUser(userId) {
  userId = String(userId);
  try {
    const raw   = fs.readFileSync(usersPath, 'utf8');
    const users = JSON.parse(raw);
    if (!users[userId]) {
      users[userId] = { registered: true, ts: Date.now() };
      fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
      console.log(`üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${userId}`);
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ users.json:', err);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
 */
function isRegistered(userId) {
  userId = String(userId);
  try {
    const raw   = fs.readFileSync(usersPath, 'utf8');
    const users = JSON.parse(raw);
    return Boolean(users[userId]);
  } catch {
    return false;
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function getUserCount() {
  try {
    const raw   = fs.readFileSync(usersPath, 'utf8');
    const users = JSON.parse(raw);
    return Object.keys(users).length;
  } catch {
    return 0;
  }
}

/**
 * –†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
 */
function broadcastAll(bot, message) {
  let users = {};
  try {
    const raw = fs.readFileSync(usersPath, 'utf8');
    users = JSON.parse(raw);
  } catch {}
  for (const uid of Object.keys(users)) {
    bot.sendMessage(uid, `üì£ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n${message}`);
  }
}

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Bot  ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
activateBotFlag();
const bot = new TelegramBot(TOKEN, { polling: true });
let launched = false;

bot.getMe().then(me => {
  console.log(`‚úÖ GENESIS –∞–∫—Ç–∏–≤–µ–Ω –∫–∞–∫ @${me.username}`);
  launched = true;
});

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)  ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
function sendMainMenu(bot, chatId, uid) {
  uid = String(uid);

  // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
  const userKeyboard = [
    [{ text: 'üßæ Info',     callback_data: 'info' }],
    [{ text: 'üõ£Ô∏è Roadmap', callback_data: 'roadmap' }],
    [{ text: 'üåê –°—Å—ã–ª–∫–∏',   callback_data: 'links' }],
    // –∫–∞—Ä—Ç–∞ —Ç–µ–ø–µ—Ä—å URL-–∫–Ω–æ–ø–∫–∞
    [{ text: 'üó∫Ô∏è –ö–∞—Ä—Ç–∞',    url: 'https://metaboom4304.github.io/genesis-data/' }],
    [{ text: '‚ùì –ü–æ–º–æ—â—å',    callback_data: 'help' }]
  ];

  // –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID
  const adminKeyboard = uid === ADMIN_ID
    ? [
        [{ text: 'üìÉ –õ–æ–≥–∏',               callback_data: 'logs' }],
        [{ text: 'üü¢ –í–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É',     callback_data: 'map_enable' }],
        [{ text: '‚ö†Ô∏è –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É',    callback_data: 'map_disable_confirm' }],
        [{ text: 'üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞',     callback_data: 'add_admin' }],
        [{ text: 'üìë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤',      callback_data: 'list_admins' }],
        [{ text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞',           callback_data: 'broadcast' }]
      ]
    : [];

  // –æ–±—ä–µ–¥–∏–Ω—è–µ–º
  const fullKeyboard = [...userKeyboard, ...adminKeyboard];

  bot.sendMessage(chatId, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
    reply_markup: { inline_keyboard: fullKeyboard }
  });
}

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë ‚öôÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã            ‚ïë  
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

// /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ —Å—Ä–∞–∑—É —à–ª—ë–º –º–µ–Ω—é –≤–Ω–∏–∑—É
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const uid    = String(msg.from.id);

  registerUser(uid);
  bot.sendMessage(chatId, 'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
    .then(() => sendMainMenu(bot, chatId, uid));
});

// /help ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
bot.onText(/\/help/, (msg) => {
  bot.sendMessage(msg.chat.id,
    'üìñ –ö–æ–º–∞–Ω–¥—ã:\n' +
    '/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –º–µ–Ω—é\n' +
    '/status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n' +
    '/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–Ω–∏–∑—É\n' +
    '/poweroff, /poweron, /restart ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º'
  );
});

// /status
bot.onText(/\/status/, (msg) => {
  bot.sendMessage(msg.chat.id,
    `üìä –°—Ç–∞—Ç—É—Å:\n- –ó–∞–ø—É—â–µ–Ω: ${launched}\n- –ê–∫—Ç–∏–≤–µ–Ω: ${isBotEnabled()}\n- –Æ–∑–µ—Ä–æ–≤: ${getUserCount()}`
  );
});

// /menu ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–≤–æ–¥ –º–µ–Ω—é –≤–Ω–∏–∑—É
bot.onText(/\/menu/, (msg) => {
  sendMainMenu(bot, msg.chat.id, msg.from.id);
});

// power commands
bot.onText(/\/poweroff/, (msg) => {
  deactivateBotFlag();
  bot.sendMessage(msg.chat.id, 'üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.').then(() => process.exit());
});

bot.onText(/\/poweron/, (msg) => {
  if (!isBotEnabled()) {
    activateBotFlag();
    bot.sendMessage(msg.chat.id, '‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.');
  } else {
    bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.');
  }
});

bot.onText(/\/restart/, (msg) => {
  deactivateBotFlag();
  activateBotFlag();
  bot.sendMessage(msg.chat.id, 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫‚Ä¶').then(() => process.exit());
});

bot.on('polling_error', err =>
  console.error('üì° Polling error:', err.message)
);

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫       ‚ïë  
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
const broadcastPending = new Set();

bot.on('callback_query', query => {
  const chatId = query.message.chat.id;
  const uid    = String(query.from.id);
  const data   = query.data;

  bot.answerCallbackQuery(query.id).catch(console.error);

  switch (data) {
    // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
    case 'info':
      bot.sendMessage(chatId, 'üßæ –í–µ—Ä—Å–∏—è: 1.0.0\nüë®‚Äçüíª –ê–≤—Ç–æ—Ä—ã: –∫–æ–º–∞–Ω–¥–∞ GENESIS');
      break;
    case 'roadmap':
      bot.sendMessage(chatId,
        'üõ£Ô∏è Roadmap:\n1. –ó–∞–ø—É—Å–∫\n2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n3. –ù–æ–≤—ã–µ —Ñ–∏—á–∏'
      );
      break;
    case 'links':
      bot.sendMessage(chatId, 'üåê –°–∞–π—Ç: https://example.com');
      break;
    case 'help':
      bot.sendMessage(chatId,
        'üìñ –ü–æ–º–æ—â—å:\n' +
        '- /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –º–µ–Ω—é\n' +
        '- /status ‚Äî —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n' +
        '- /menu ‚Äî –º–µ–Ω—é —Å–Ω–∏–∑—É'
      );
      break;

    // –∞–¥–º–∏–Ω—Å–∫–∏–µ
    case 'logs':
      if (uid === ADMIN_ID)
        bot.sendMessage(chatId, 'üìÑ –õ–æ–≥–∏ –∫–∞—Ä—Ç—ã: —Ç–∞–π–ª–æ–≤ 344/500, –æ—à–∏–±–æ–∫ 0');
      break;
    case 'map_enable':
      if (uid === ADMIN_ID)
        bot.sendMessage(chatId, 'üü¢ –ö–∞—Ä—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞.');
      break;
    case 'map_disable_confirm':
      if (uid === ADMIN_ID) {
        bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:', {
          reply_markup: {
            inline_keyboard: [[
              { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'map_disable_final' }
            ]]
          }
        });
      }
      break;
    case 'map_disable_final':
      if (uid === ADMIN_ID) {
        deactivateBotFlag();
        bot.sendMessage(chatId, 'üõë –ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.');
        broadcastAll(bot,
          '‚õî –ö–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Ö—Ä–∞–±–æ—Ç.\n–°–∫–æ—Ä–æ –≤–µ—Ä–Ω—ë–º—Å—è!'
        );
      }
      break;
    case 'add_admin':
      if (uid === ADMIN_ID)
        bot.sendMessage(chatId, 'üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
      break;
    case 'list_admins':
      if (uid === ADMIN_ID)
        bot.sendMessage(chatId, `üìÉ –¢–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω: ${ADMIN_ID}`);
      break;
    case 'broadcast':
      if (uid === ADMIN_ID) {
        broadcastPending.add(uid);
        bot.sendMessage(chatId,
          '‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
          { reply_markup: { force_reply: true } }
        );
      }
      break;

    default:
      bot.sendMessage(chatId, 'ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.');
  }
});

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ (broadcast)        ‚ïë  
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
bot.on('message', msg => {
  const uid = String(msg.from.id);
  if (
    broadcastPending.has(uid) &&
    msg.reply_to_message?.text.includes('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
  ) {
    broadcastPending.delete(uid);
    broadcastAll(bot, msg.text);
    bot.sendMessage(uid, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.');
  }
});

module.exports = bot;
