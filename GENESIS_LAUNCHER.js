// ============================
// GENESIS_LAUNCHER.js (ESM) - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
// ============================
import 'dotenv/config';
import fs from 'fs';
import path from 'path';
import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import { fileURLToPath, pathToFileURL } from 'url';

// -----------------------------
// ENV –ø—Ä–æ–≤–µ—Ä–∫–∞
// -----------------------------
const requiredEnv = ['TELEGRAM_TOKEN', 'API_URL'];
for (const key of requiredEnv) {
  if (!process.env[key]) {
    console.error(`üî¥ Missing ENV: ${key}`);
    process.exit(1);
  }
}

// -----------------------------
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏
// -----------------------------
const TOKEN         = process.env.TELEGRAM_TOKEN;
const API_URL       = process.env.API_URL;
const BOT_PORT      = process.env.BOT_PORT || process.env.PORT || 10000;

const __filename   = fileURLToPath(import.meta.url);
const __dirname    = path.dirname(__filename);

// -----------------------------
// Express keep-alive
// -----------------------------
const app = express();
app.use(express.json());

app.get('/health', (_req, res) => {
  res.status(200).json({ 
    status: 'ok', 
    service: 'genesis-war-bot',
    timestamp: new Date().toISOString()
  });
});

app.get('/', (_req, res) => res.send('ü§ñ GENESIS bot is alive!'));

app.listen(BOT_PORT, '0.0.0.0', () => console.log(`üåç Express (keep-alive) listening on port ${BOT_PORT}`));
setInterval(() => console.log('üíì Bot heartbeat ‚Äì still alive'), 60_000);

// -----------------------------
// Telegram Bot
// -----------------------------
const bot = new TelegramBot(TOKEN, { polling: true });

bot.getMe()
  .then(me => console.log(`‚úÖ GENESIS bot active as @${me.username}`))
  .catch(console.error);

// -----------------------------
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
// -----------------------------
const authRequests = new Map();

// -----------------------------
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
// -----------------------------
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º auth_
bot.onText(/\/start\s+auth_(.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const requestId = match[1];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å
  if (!authRequests.has(requestId)) {
    return bot.sendMessage(chatId, '‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.');
  }
  
  const { expiresAt } = authRequests.get(requestId);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø—Ä–æ—Å–∞
  if (Date.now() > expiresAt) {
    authRequests.delete(requestId);
    return bot.sendMessage(chatId, '‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.');
  }
  
  const userId = msg.from.id;
  const firstName = msg.from.first_name;
  const lastName = msg.from.last_name || '';
  const username = msg.from.username || '';
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
    const response = await fetch(`${API_URL}/api/users/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        telegram_id: userId,
        first_name: firstName,
        last_name: lastName,
        username: username
      })
    });
    
    if (!response.ok) {
      throw new Error('Failed to generate token');
    }
    
    const { token } = await response.json();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É —Å —Ç–æ–∫–µ–Ω–æ–º
    const siteUrl = 'https://genesis-data.onrender.com';
    const authUrl = `${siteUrl}?token=${token}&request_id=${requestId}`;
    
    const message = `
‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:
${authUrl}

–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç.
    `;
    
    await bot.sendMessage(
      chatId, 
      message,
      { 
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [
            [{
              text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–µ',
              url: authUrl
            }]
          ]
        }
      }
    );
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    authRequests.delete(requestId);
  } catch (error) {
    console.error('Auth confirmation error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  const message = `
üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GENESIS WAR MAP!

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram.

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞:
  `;
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [{
          text: '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram',
          callback_data: 'auth_request'
        }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const uid = String(query.from.id);
  
  if (query.data === 'auth_request') {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const requestId = Math.random().toString(36).substr(2, 9);
    const expiresAt = Date.now() + 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    authRequests.set(requestId, { expiresAt });
    
    const message = `
‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω!

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞:
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥" –Ω–∏–∂–µ
2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –Ω–∞ –∫–∞—Ä—Ç—É

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.
    `;
    
    bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥',
            callback_data: `confirm_auth_${requestId}`
          }]
        ]
      }
    });
    
    bot.answerCallbackQuery(query.id);
  } else if (query.data.startsWith('confirm_auth_')) {
    const requestId = query.data.replace('confirm_auth_', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å
    if (!authRequests.has(requestId)) {
      await bot.answerCallbackQuery(query.id, {
        text: '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª',
        show_alert: true
      });
      return;
    }
    
    const { expiresAt } = authRequests.get(requestId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if (Date.now() > expiresAt) {
      authRequests.delete(requestId);
      await bot.answerCallbackQuery(query.id, {
        text: '–ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π',
        show_alert: true
      });
      return;
    }
    
    const userId = query.from.id;
    const firstName = query.from.first_name;
    const lastName = query.from.last_name || '';
    const username = query.from.username || '';
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
      const response = await fetch(`${API_URL}/api/users/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          telegram_id: userId,
          first_name: firstName,
          last_name: lastName,
          username: username
        })
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate token');
      }
      
      const { token } = await response.json();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É —Å —Ç–æ–∫–µ–Ω–æ–º
      const siteUrl = 'https://genesis-data.onrender.com';
      const authUrl = `${siteUrl}?token=${token}&request_id=${requestId}`;
      
      const message = `
‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:
${authUrl}

–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç.
      `;
      
      await bot.sendMessage(
        chatId, 
        message,
        { 
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [{
                text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–µ',
                url: authUrl
              }]
            ]
          }
        }
      );
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      authRequests.delete(requestId);
      
      await bot.answerCallbackQuery(query.id);
    } catch (error) {
      console.error('Auth confirmation error:', error);
      await bot.answerCallbackQuery(query.id, {
        text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        show_alert: true
      });
    }
  }
});

// -----------------------------
// Graceful shutdown
// -----------------------------
async function cleanUp() {
  console.log('üõë Received shutdown signal, stopping bot‚Ä¶');
  try {
    await bot.stopPolling();
    console.log('‚úÖ Polling stopped.');
  } catch (err) {
    console.error('‚ùå Error during stopPolling:', err);
  }
  process.exit(0);
}
process.on('SIGINT', cleanUp);
process.on('SIGTERM', cleanUp);
