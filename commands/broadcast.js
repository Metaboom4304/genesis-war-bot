const fs = require('fs');
const path = require('path');

const broadcastTypes = {
  default: 'üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ',
  important: '‚ùó –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
  tech: 'üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
  info: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
  warn: '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
};

module.exports = function setupBroadcast(bot, developerIds) {
  const usersPath = path.join(__dirname, '../data/users.json');

  bot.onText(/^\/broadcast\s+(\w+)\s+([\s\S]+)/, (msg, match) => {
    const senderId = msg.from.id;
    if (!developerIds.includes(senderId)) {
      return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }

    const type = match[1].toLowerCase();
    const text = match[2].trim();
    const prefix = broadcastTypes[type] || broadcastTypes.default;
    const message = `${prefix}\n\n${text}`;

    let recipients;
    try {
      recipients = JSON.parse(fs.readFileSync(usersPath));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json:', err);
      return bot.sendMessage(senderId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π');
    }

    let sent = 0;
    recipients.forEach(chatId => {
      bot.sendMessage(chatId, message)
        .then(() => sent++)
        .catch(console.error);
    });

    bot.sendMessage(
      senderId,
      `üì§ –†–∞—Å—Å—ã–ª–∫–∞ "${type}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${sent} –∏–∑ ${recipients.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`
    );
  });
};
