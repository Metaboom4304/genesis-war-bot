// commands/logs_button.js
export default {
  name: 'üìù –õ–æ–≥–∏',
  description: '–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞',
  execute: async (bot, msg) => {
    const chatId = msg.chat.id;
    const userId = String(msg.from.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (userId !== process.env.ADMIN_ID) {
      return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.');
    }
    
    // –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞
    try {
      const fs = await import('fs');
      const path = await import('path');
      
      const logsPath = path.join(process.cwd(), 'logs.txt');
      if (fs.existsSync(logsPath)) {
        let logs = fs.readFileSync(logsPath, 'utf8');
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if (logs.length > 4000) {
          logs = logs.substring(logs.length - 4000);
          logs = '...\n' + logs;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(chatId, `<pre>${logs}</pre>`, {
          parse_mode: 'HTML'
        });
      } else {
        await bot.sendMessage(chatId, 'üì≠ –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:', error);
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: ${error.message}`);
    }
  }
};
