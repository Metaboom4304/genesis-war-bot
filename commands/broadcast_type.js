import fs from 'fs';
import path from 'path';

const broadcastTypes = {
  default: 'üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ',
  important: '‚ùó –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
  tech: 'üõ†Ô∏è –¢–µ—Ö–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
  info: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
  warn: '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
};

export default {
  name: 'broadcast', // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ —Å–∞–º–∞ –ª–æ–≤–∏—Ç —á–µ—Ä–µ–∑ RegExp
  execute(bot, msg) {
    // —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∏–∂–µ –≤—Ä—É—á–Ω—É—é
  }
}

// üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ RegExp
export function setupBroadcastRegex(bot, developerIds) {
  const usersPath = path.join(process.cwd(), 'data', 'users.json');

  bot.onText(/^\/broadcast\s+(\w+)\s+([\s\S]+)/, async (msg, match) => {
    const senderId = msg.from.id;
    const chatId = msg.chat.id;

    if (!developerIds.includes(senderId)) {
      return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ');
    }

    const type = match[1].toLowerCase();
    const text = match[2].trim();
    const prefix = broadcastTypes[type] || broadcastTypes.default;
    const message = `${prefix}\n\n${text}`;

    let recipients;
    try {
      recipients = JSON.parse(fs.readFileSync(usersPath));
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json:', err);
      return bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }

    let sent = 0;
    for (const uid of Object.keys(recipients)) {
      try {
        await bot.sendMessage(uid, message);
        sent++;
      } catch (err) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${uid}:`, err.message);
      }
    }

    bot.sendMessage(
      senderId,
      `üì§ –†–∞—Å—Å—ã–ª–∫–∞ "${type}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${sent}/${Object.keys(recipients).length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
    );
  });
}
