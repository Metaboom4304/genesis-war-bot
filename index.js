// index.js - API –°–µ—Ä–≤–∏—Å (genesis-map-api)
import express from 'express';
import cors from 'cors';
import pkg from 'pg';
const { Pool } = pkg;
// 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º node-fetch
import fetch from 'node-fetch'; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install node-fetch
import 'dotenv/config'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ dotenv/config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

const app = express();
const port = process.env.PORT || 3000;

// --- Middleware ---
// –í–ê–ñ–ù–û: CORS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å preflight OPTIONS –∑–∞–ø—Ä–æ—Å—ã
// –¢–∞–∫–∂–µ —É–≤–µ–ª–∏—á–∏–º –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ payload, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–∏–µ
app.use(express.json({ limit: '10mb' })); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–∏–µ
app.use(cors({
  origin: true, // –û—Ç—Ä–∞–∂–∞–µ—Ç origin –∑–∞–ø—Ä–æ—Å–∞. –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 'https://genesis-data.onrender.com' –¥–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
  optionsSuccessStatus: 200
}));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Neon
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseConnection() {
  try {
    const client = await pool.connect();
    console.log('‚úÖ Database connection successful');
    client.release();
    
    const tableCheck = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'users'
      );
    `);
    
    console.log('Users table exists:', tableCheck.rows[0].exists);

    const marksTableCheck = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'user_marks'
      );
    `);
    console.log('User_marks table exists:', marksTableCheck.rows[0].exists);

    const tilesTableCheck = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'tiles_caches'
      );
    `);
    console.log('Tiles_caches table exists:', tilesTableCheck.rows[0].exists);

  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
  }
}

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
async function initDatabase() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        telegram_id BIGINT PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        username TEXT,
        language_code TEXT,
        is_premium BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);

    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_marks (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(telegram_id) ON DELETE CASCADE,
        tile_id INTEGER NOT NULL,
        mark_type TEXT NOT NULL,
        comment TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, tile_id, mark_type)
      );
    `);

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tiles_caches —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
    await pool.query(`
      CREATE TABLE IF NOT EXISTS tiles_caches (
        tile_id INTEGER PRIMARY KEY,
        data JSONB,
        last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);

    console.log('‚úÖ Database tables initialized');
  } catch (error) {
    console.error('‚ùå Error initializing database tables:', error);
  }
}

// --- –õ–æ–≥–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–ª–æ–≤ ---
const EXTERNAL_TILE_API_URL = 'https://back.genesis-of-ages.space/manage/get_tile_info.php';
const CACHE_TTL_MS = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Ç–∞–π–ª–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –¥–∞–Ω–Ω—ã–µ —É –≤–Ω–µ—à–Ω–µ–≥–æ API.
 * @returns {Promise<boolean>} true, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ false.
 */
async function refreshTileCache() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤...');
    try {
        const response = await fetch(EXTERNAL_TILE_API_URL);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const fullResponseData = await response.json();
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–ª–æ–≤ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –≤ –æ—Ç–≤–µ—Ç–µ: ${Object.keys(fullResponseData).length}`);

        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–ª–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ–ª–µ 'tiles'
        const tileData = fullResponseData.tiles;
        if (!tileData || typeof tileData !== 'object') {
             console.warn('‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π API –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–ª–µ "tiles" –∏–ª–∏ –æ–Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º.');
             return false;
        }

        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            let updatedCount = 0;
            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ –≤–Ω—É—Ç—Ä–∏ tileData (–∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è id_tile)
            for (const [tileIdStr, tileInfo] of Object.entries(tileData)) {
                const tileId = parseInt(tileIdStr, 10);
                if (isNaN(tileId)) {
                    console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∞–π–ª–∞: ${tileIdStr}`);
                    continue;
                }
                // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∫—ç—à–µ
                await client.query(
                    `
                    INSERT INTO tiles_caches (tile_id, data, last_updated)
                    VALUES ($1, $2, CURRENT_TIMESTAMP)
                    ON CONFLICT (tile_id)
                    DO UPDATE SET data = EXCLUDED.data, last_updated = CURRENT_TIMESTAMP;
                    `,
                    [tileId, JSON.stringify(tileInfo)]
                );
                updatedCount++;
            }
            
            await client.query('COMMIT');
            console.log(`‚úÖ –ö—ç—à —Ç–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updatedCount}`);
            return true;
        } catch (err) {
            await client.query('ROLLBACK');
            throw err;
        } finally {
            client.release();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤:', error);
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–¥–∞–µ—Ç—Å—è –ª–∏ –∫—ç—à —Ç–∞–π–ª–æ–≤ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.
 * @returns {Promise<boolean>} true, –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ false.
 */
async function isTileCacheStale() {
    try {
        const result = await pool.query(
            'SELECT MAX(last_updated) AS latest_update FROM tiles_caches'
        );
        const latestUpdate = result.rows[0]?.latest_update;
        
        if (!latestUpdate) {
            console.log('üîç –ö—ç—à —Ç–∞–π–ª–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
            return true; // –ö—ç—à –ø—É—Å—Ç–æ–π
        }
        
        const now = new Date();
        const lastUpdated = new Date(latestUpdate);
        const ageMs = now - lastUpdated;
        
        console.log(`‚è±Ô∏è –í–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤: ${(ageMs / 1000 / 60).toFixed(2)} –º–∏–Ω—É—Ç.`);
        
        return ageMs > CACHE_TTL_MS;
    } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å, —á—Ç–æ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª
        return true;
    }
}

// --- API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ---

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---

app.post('/register', async (req, res) => {
  try {
    const { telegram_id, first_name, last_name, username, language_code, is_premium } = req.body;

    if (!telegram_id || !first_name) {
      return res.status(400).json({ 
        success: false, 
        error: 'Missing required fields: telegram_id and first_name are required' 
      });
    }

    const query = `
      INSERT INTO users (telegram_id, first_name, last_name, username, language_code, is_premium)
      VALUES ($1, $2, $3, $4, $5, $6)
      ON CONFLICT (telegram_id) 
      DO UPDATE SET
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name,
        username = EXCLUDED.username,
        language_code = EXCLUDED.language_code,
        is_premium = EXCLUDED.is_premium,
        updated_at = CURRENT_TIMESTAMP
      RETURNING *;
    `;

    const values = [
      telegram_id, 
      first_name, 
      last_name || null, 
      username || null, 
      language_code || 'ru',
      is_premium || false
    ];
    const result = await pool.query(query, values);

    res.status(200).json({ success: true, user: result.rows[0] });
  } catch (error) {
    console.error('‚ùå Error registering user:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message,
      details: 'Database operation failed'
    });
  }
});

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.post('/api/users/register', async (req, res) => {
  // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã–∑–æ–≤–∞ –¥—Ä—É–≥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  try {
      await app._router.handle({ method: 'POST', url: '/register', body: req.body }, res);
  } catch (error) {
      // –ï—Å–ª–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
      console.warn('–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ /api/users/register -> /register –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é.');
      return app._router.stack.find(layer => layer.route?.path === '/register')?.handle(req, res);
  }
});

app.get('/users', async (req, res) => {
  try {
    const result = await pool.query('SELECT telegram_id FROM users');
    const userIds = result.rows.map(row => row.telegram_id);
    res.status(200).json(userIds);
  } catch (error) {
    console.error('‚ùå Error fetching users:', error);
    res.status(500).json({ error: 'Database error', details: error.message });
  }
});

app.get('/users/:id', async (req, res) => {
  try {
    const userId = req.params.id;
    const result = await pool.query('SELECT * FROM users WHERE telegram_id = $1', [userId]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    res.status(200).json(result.rows[0]);
  } catch (error) {
    console.error('‚ùå Error fetching user:', error);
    res.status(500).json({ error: 'Database error', details: error.message });
  }
});

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---

app.post('/notify', async (req, res) => {
  try {
    const { user_id, tile_id, action, comment } = req.body;
    console.log(`Notification: User ${user_id} performed ${action} on tile ${tile_id} with comment: ${comment}`);
    res.status(200).json({ success: true });
  } catch (error) {
    console.error('‚ùå Error processing notification:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã ---

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/marks/:userId', async (req, res) => {
    const userId = req.params.userId;
    try {
        const result = await pool.query(
          'SELECT tile_id, mark_type, comment FROM user_marks WHERE user_id = $1', 
          [userId]
        );
        res.status(200).json(result.rows);
    } catch (error) {
        console.error(`Error fetching marks for user ${userId}:`, error);
        res.status(500).json({ error: 'Failed to fetch marks' });
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/marks', async (req, res) => {
    const { user_id, tile_id, mark_type, comment } = req.body;
    
    if (!user_id || !tile_id || !mark_type) {
       return res.status(400).json({ error: 'Missing required fields: user_id, tile_id, mark_type' });
    }

    try {
        let query, values;
        if (mark_type === 'clear') {
            query = 'DELETE FROM user_marks WHERE user_id = $1 AND tile_id = $2';
            values = [user_id, tile_id];
        } else {
            query = `
                INSERT INTO user_marks (user_id, tile_id, mark_type, comment)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id, tile_id, mark_type)
                DO UPDATE SET comment = EXCLUDED.comment, created_at = CURRENT_TIMESTAMP
                RETURNING *;
            `;
            values = [user_id, tile_id, mark_type, comment || null];
        }
        
        const result = await pool.query(query, values);
        
        if (mark_type === 'clear' && result.rowCount === 0) {
             res.status(200).json({ success: true, message: 'Mark cleared (was not present)' });
        } else {
            res.status(200).json({ success: true, mark: result.rows[0] || null });
        }
    } catch (error) {
        console.error(`Error saving mark for user ${user_id} on tile ${tile_id}:`, error);
        res.status(500).json({ error: 'Failed to save mark', details: error.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–ª–∞—Ö
// –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tiles_caches
app.get('/api/tiles-cache', async (req, res) => {
    try {
        console.log('üì• –ó–∞–ø—Ä–æ—Å –∫ /api/tiles-cache');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–¥–∞–µ—Ç—Å—è –ª–∏ –∫—ç—à –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        const isStale = await isTileCacheStale();
        if (isStale) {
            console.log('üîÑ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
            const refreshSuccess = await refreshTileCache();
            if (!refreshSuccess) {
                 console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Ç–∞–π–ª–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å).');
                 // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 500, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        const result = await pool.query('SELECT tile_id, data FROM tiles_caches');
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á–∏ - id_tile
        const tilesObject = {};
        result.rows.forEach(row => {
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ data —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–ª–µ
            tilesObject[row.tile_id] = { id_tile: row.tile_id, ...JSON.parse(row.data) };
        });

        console.log(`üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤: ${Object.keys(tilesObject).length}`);
        res.status(200).json({ tiles: tilesObject });
    } catch (error) {
        console.error('‚ùå Error fetching tiles cache:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        res.status(200).json({ tiles: {} }); // –ò–ª–∏ res.status(500).json({ error: 'Failed to fetch tiles cache' });
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤ (–µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å –µ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç)
// –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω, –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ /api/tiles-cache
app.post('/api/tiles-cache', async (req, res) => {
    // req.body –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä { tilesResponse }
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ req.body —Ç–∞–∫–∞—è –∂–µ, –∫–∞–∫ —É –≤–Ω–µ—à–Ω–µ–≥–æ API: { tiles: { ... } }
    const { tiles: tilesData } = req.body; 
    
    if (!tilesData || typeof tilesData !== 'object') {
        return res.status(400).json({ error: 'Invalid data format for tiles cache. Expected { tiles: { ... } }' });
    }

    try {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            let updatedCount = 0;
            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ –≤–Ω—É—Ç—Ä–∏ tilesData (–∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è id_tile)
            for (const [tileIdStr, tileData] of Object.entries(tilesData)) {
                const tileId = parseInt(tileIdStr, 10);
                if (isNaN(tileId)) {
                    console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∞–π–ª–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞: ${tileIdStr}`);
                    continue;
                }
                await client.query(
                    `
                    INSERT INTO tiles_caches (tile_id, data, last_updated)
                    VALUES ($1, $2, CURRENT_TIMESTAMP)
                    ON CONFLICT (tile_id)
                    DO UPDATE SET data = EXCLUDED.data, last_updated = CURRENT_TIMESTAMP;
                    `,
                    [tileId, JSON.stringify(tileData)]
                );
                updatedCount++;
            }
            
            await client.query('COMMIT');
            res.status(200).json({ success: true, message: `Tiles cache updated. Updated records: ${updatedCount}` });
        } catch (err) {
            await client.query('ROLLBACK');
            throw err;
        } finally {
            client.release();
        }
    } catch (error) {
        console.error('Error saving tiles cache:', error);
        res.status(500).json({ error: 'Failed to save tiles cache', details: error.message });
    }
});

// –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ç–∞–π–ª–æ–≤ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î
// –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
app.get('/api/proxy/tile-info', async (req, res) => {
    console.log('üì• –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ /api/proxy/tile-info. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.');
    try {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        const refreshSuccess = await refreshTileCache();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const response = await fetch(EXTERNAL_TILE_API_URL);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const rawData = await response.json();
        
        if (refreshSuccess) {
            res.status(200).json({ ...rawData, message: "Data fetched and cache updated" });
        } else {
             // –î–∞–∂–µ –µ—Å–ª–∏ –∫—ç—à –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
             res.status(200).json({ ...rawData, message: "Data fetched, but cache update failed", cache_update_success: false });
        }
    } catch (error) {
        console.error('‚ùå Error in /api/proxy/tile-info:', error);
        // –í–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ 500, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        try {
             const cacheResult = await pool.query('SELECT tile_id, data FROM tiles_caches LIMIT 1');
             if (cacheResult.rows.length > 0) {
                 console.log("‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.");
                 const tilesObject = {};
                 cacheResult.rows.forEach(row => {
                     tilesObject[row.tile_id] = { id_tile: row.tile_id, ...JSON.parse(row.data) };
                 });
                 return res.status(200).json({ tiles: tilesObject, message: "External API failed, data from cache", from_cache: true });
             }
        } catch (cacheError) {
             console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", cacheError);
        }
        res.status(500).json({ error: 'Failed to fetch proxy tile info', details: error.message });
    }
});

// --- –û–±—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ---

app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    service: 'genesis-map-api'
  });
});

app.get('/test', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    message: 'API is working',
    timestamp: new Date().toISOString()
  });
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---

app.listen(port, async () => {
  console.log(`üöÄ genesis-map-api server is running on port ${port}`);
  await initDatabase();
  await checkDatabaseConnection();
  
  // –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª
  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ç–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...");
  const isStale = await isTileCacheStale();
  if (isStale) {
      console.log("üîÑ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –û–±–Ω–æ–≤–ª—è–µ–º...");
      await refreshTileCache();
  } else {
      console.log("‚úÖ –ö—ç—à —Ç–∞–π–ª–æ–≤ –∞–∫—Ç—É–∞–ª–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.");
  }
  
  console.log(`‚úÖ genesis-map-api service started successfully`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
pool.on('error', (err) => {
  console.error('‚ùå Unexpected database error', err);
  process.exit(-1);
});

// Graceful shutdown –¥–ª—è API
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down API gracefully');
  pool.end(() => {
    console.log('Database pool closed');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down API gracefully');
  pool.end(() => {
    console.log('Database pool closed');
    process.exit(0);
  });
});

export default app;
