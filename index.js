require('dotenv').config();
const fs = require('fs');
const path = require('path');
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { BOT_TOKEN, DEVELOPER_IDS, MAP_URL } = require('./config');

// Keepalive
const app = express();
app.get('/', (_req, res) => res.send('‚úÖ Bot is running'));
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => console.log(`üü¢ Keepalive listening on port ${PORT}`));

// Bot init
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// User base
const usersPath = path.join(__dirname, 'data/users.json');
let knownUsers = [];
try {
  knownUsers = JSON.parse(fs.readFileSync(usersPath));
} catch {
  fs.writeFileSync(usersPath, '[]', 'utf-8');
  console.log('üìÇ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π users.json');
}

// Universal listener
bot.on('message', (msg) => {
  const id = msg.chat.id;
  if (!knownUsers.includes(id)) {
    knownUsers.push(id);
    fs.writeFileSync(usersPath, JSON.stringify(knownUsers, null, 2));
    console.log(`‚ûï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${id}`);
  }

  console.log(`üì© ${msg.text} ‚Üê ${id}`);
});

// Broadcast –∫–æ–º–∞–Ω–¥–∞
const setupBroadcast = require('./commands/broadcast');
setupBroadcast(bot, DEVELOPER_IDS);

// –ö–æ–º–∞–Ω–¥—ã
bot.onText(/^\/start$/, (msg) => {
  bot.sendMessage(msg.chat.id, 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Genesis War Bot!');
});

bot.onText(/^\/status$/, async (msg) => {
  const me = await bot.getMe();
  const uptime = Math.floor(process.uptime());
  bot.sendMessage(msg.chat.id, `‚è± –ê–ø—Ç–∞–π–º: ${uptime}s\nü§ñ –ë–æ—Ç: @${me.username}\nüë§ –í–∞—à ID: ${msg.chat.id}`);
});

bot.onText(/^\/help$/, (msg) => {
  bot.sendMessage(msg.chat.id, `
üìò –ö–æ–º–∞–Ω–¥—ã:
/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/status ‚Äî –ê–ø—Ç–∞–π–º –∏ ID
/map ‚Äî –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–µ
/maptoggle ‚Äî –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É
/whoami ‚Äî –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/debug ‚Äî –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/broadcast <—Ç–∏–ø> <—Ç–µ–∫—Å—Ç> ‚Äî –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

–¢–∏–ø—ã: tech, important, info, warn
  `);
});

bot.onText(/^\/map$/, (msg) => {
  bot.sendMessage(msg.chat.id, 'üìç –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–µ Genesis:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', url: MAP_URL }],
      ],
    },
  });
});

bot.onText(/^\/whoami$/, (msg) => {
  const { id, username, first_name } = msg.from;
  const role = DEVELOPER_IDS.includes(id) ? 'üõ°Ô∏è Developer' : 'üë§ User';
  bot.sendMessage(msg.chat.id, `
üîç –ü—Ä–æ—Ñ–∏–ª—å:
ID: ${id}
Username: ${username || '‚Äî'}
–ò–º—è: ${first_name || '‚Äî'}
–†–æ–ª—å: ${role}
  `);
});

bot.onText(/^\/debug$/, async (msg) => {
  const up = Math.floor(process.uptime());
  const me = await bot.getMe();
  const isDev = DEVELOPER_IDS.includes(msg.from.id);
  bot.sendMessage(msg.chat.id, `
üîß Debug Info:
Polling: ‚úÖ
Bot: @${me.username}
User ID: ${msg.from.id}
Dev Access: ${isDev ? '‚úÖ' : '‚ùå'}
Uptime: ${up}s
  `);
});

// üó∫Ô∏è –ö–æ–º–∞–Ω–¥–∞ maptoggle
const configPath = path.join(__dirname, 'config.js');
function reloadConfig() {
  delete require.cache[require.resolve(configPath)];
  return require(configPath);
}

function logMapToggle(user, status) {
  const logEntry = `${new Date().toISOString()} ‚Äî ${user} ${status ? '–≤–∫–ª—é—á–∏–ª' : '–æ—Ç–∫–ª—é—á–∏–ª'} –∫–∞—Ä—Ç—É\n`;
  fs.appendFileSync(path.join(__dirname, 'logs.txt'), logEntry);
}

bot.onText(/^\/maptoggle$/, (msg) => {
  const id = msg.chat.id;
  const config = reloadConfig();
  const statusText = config.mapEnabled ? 'üü¢ –≤–∫–ª—é—á–µ–Ω–∞' : 'üî¥ –æ—Ç–∫–ª—é—á–µ–Ω–∞';

  bot.sendMessage(id, `–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç—ã: ${statusText}`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: config.mapEnabled ? '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É' : '‚úÖ –í–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç—É', callback_data: 'toggle_map' }]
      ]
    }
  });
});

// üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (query) => {
  const id = query.from.id;
  const data = query.data;
  const username = query.from.username || query.from.first_name || 'unknown';

  bot.answerCallbackQuery(query.id);

  // üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
  if (data === 'toggle_map') {
    const config = reloadConfig();
    config.mapEnabled = !config.mapEnabled;
    const newConfigText = `module.exports = ${JSON.stringify(config, null, 2)};\n`;
    fs.writeFileSync(configPath, newConfigText);

    bot.sendMessage(id, `–ö–∞—Ä—Ç–∞ —Ç–µ–ø–µ—Ä—å ${config.mapEnabled ? 'üü¢ –≤–∫–ª—é—á–µ–Ω–∞' : 'üî¥ –æ—Ç–∫–ª—é—á–µ–Ω–∞'}`);
    logMapToggle(username, config.mapEnabled);
    return;
  }

  // –î—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
  if (data === 'open_dev_panel') {
    bot.sendMessage(id, 'üõ†Ô∏è DevPanel: —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞');
  }
  else if (data === 'open_updates') {
    bot.sendMessage(id, 'üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: \n‚Äî –í–µ—Ä—Å–∏—è 0.15\n‚Äî –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —Ç–∞–π–ª—ã\n‚Äî Debug-–ø–∞–Ω–µ–ª—å');
  }
  else {
    bot.sendMessage(id, `üìå –í—ã –Ω–∞–∂–∞–ª–∏: ${data}`);
  }
});

// –ó–∞–ø—É—Å–∫
bot.getMe().then(me => {
  console.log(`ü§ñ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∫–∞–∫ @${me.username} (${me.id})`);
});
console.log('‚úÖ Genesis War Bot –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω');
