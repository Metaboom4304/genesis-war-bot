import express from 'express';
import cors from 'cors';
import { Pool } from 'pg';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import 'dotenv/config';
import compression from 'compression';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';

const app = express();
const port = process.env.PORT || 3000;
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const CODE_LIFETIME = 5 * 60 * 1000;

console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Å–µ—Ä–≤–µ—Ä–∞...');

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Middleware ---
app.use(helmet({
  contentSecurityPolicy: false
}));

app.use(compression());
app.use(express.json({ limit: '50mb' }));

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 1000,
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
});
app.use('/api/', apiLimiter);

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
  origin: function (origin, callback) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
    if (!origin) return callback(null, true);
    
    const allowedOrigins = [
      'https://genesis-data.onrender.com',
      'http://localhost:3000',
      'http://127.0.0.1:3000',
      'http://localhost:8080',
      'http://127.0.0.1:8080',
      'https://your-frontend-domain.com' // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
    ];
    
    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      console.log('üîí CORS –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è origin:', origin);
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'Accept', 'X-Requested-With']
}));

app.options('*', cors());

// --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  max: 20,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
async function initDatabase() {
  try {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id BIGINT PRIMARY KEY,
        first_name TEXT NOT NULL,
        last_name TEXT,
        username TEXT,
        language_code TEXT,
        created_at TIMESTAMP DEFAULT NOW()
      );
    `);
    
    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_marks (
        user_id BIGINT NOT NULL,
        tile_id INTEGER NOT NULL,
        mark_type VARCHAR(20) NOT NULL,
        comment TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        PRIMARY KEY (user_id, tile_id, mark_type)
      );
      
      CREATE INDEX IF NOT EXISTS idx_user_marks_user_id ON user_marks(user_id);
      CREATE INDEX IF NOT EXISTS idx_user_marks_tile_id ON user_marks(tile_id);
    `);
    
    await pool.query(`
      CREATE TABLE IF NOT EXISTS tiles (
        tile_id INTEGER PRIMARY KEY,
        lat NUMERIC(10, 6) NOT NULL,
        lng NUMERIC(10, 6) NOT NULL,
        has_owner BOOLEAN NOT NULL DEFAULT false,
        updated_at TIMESTAMP DEFAULT NOW()
      );
      
      CREATE INDEX IF NOT EXISTS idx_tiles_tile_id ON tiles(tile_id);
    `);
    
    await pool.query(`
      CREATE TABLE IF NOT EXISTS access_codes (
        code VARCHAR(6) PRIMARY KEY,
        user_id BIGINT NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        used BOOLEAN DEFAULT false
      );
      
      CREATE INDEX IF NOT EXISTS idx_access_codes_created ON access_codes(created_at);
    `);
    
    await pool.query(`
      CREATE TABLE IF NOT EXISTS access_tokens (
        token VARCHAR(15) PRIMARY KEY,
        user_id BIGINT NOT NULL,
        expires_at TIMESTAMP NOT NULL
      );
      
      CREATE INDEX IF NOT EXISTS idx_access_tokens_expires ON access_tokens(expires_at);
    `);
    
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// --- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
async function cleanupOldCodes() {
  try {
    const cutoffTime = new Date(Date.now() - CODE_LIFETIME);
    const result = await pool.query(`
      DELETE FROM access_codes WHERE created_at < $1
    `, [cutoffTime]);
    
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.rowCount} —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤:', error);
  }
}

async function cleanupOldTokens() {
  try {
    const cutoffTime = new Date();
    const result = await pool.query(`
      DELETE FROM access_tokens WHERE expires_at < $1
    `, [cutoffTime]);
    
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.rowCount} —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
cleanupOldCodes();
cleanupOldTokens();
setInterval(cleanupOldCodes, 10 * 60 * 1000);
setInterval(cleanupOldTokens, 30 * 60 * 1000);

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function logRequest(endpoint, req) {
  console.log(`üì® ${endpoint} - IP: ${req.ip}, User-Agent: ${req.get('User-Agent')}`);
}

// --- API Endpoints ---

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞
app.post('/api/save-code', async (req, res) => {
  logRequest('POST /api/save-code', req);
  console.log('üíæ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
  
  const { code, userId } = req.body;
  
  if (!code || !userId) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { code, userId });
    return res.status(400).json({ 
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
      received: { code, userId }
    });
  }
  
  if (!/^\d{6}$/.test(code)) {
    return res.status(400).json({ 
      error: '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä',
      received: code 
    });
  }
  
  try {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await pool.query(`
      DELETE FROM access_codes 
      WHERE user_id = $1 OR created_at < NOW() - INTERVAL '10 minutes'
    `, [userId]);
    
    const result = await pool.query(`
      INSERT INTO access_codes (code, user_id, created_at, used)
      VALUES ($1, $2, NOW(), false)
      RETURNING *
    `, [code, userId]);
    
    console.log('‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:', result.rows[0]);
    
    res.json({ 
      success: true, 
      message: '–ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
      savedCode: result.rows[0]
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –ë–î:', error);
    
    if (error.code === '23505') {
      const newCode = Math.floor(100000 + Math.random() * 900000).toString();
      console.log(`üîÑ –ö–æ–¥ ${code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π: ${newCode}`);
      
      try {
        const retryResult = await pool.query(`
          INSERT INTO access_codes (code, user_id, created_at, used)
          VALUES ($1, $2, NOW(), false)
          RETURNING *
        `, [newCode, userId]);
        
        console.log('‚úÖ –ù–æ–≤—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', retryResult.rows[0]);
        
        res.json({ 
          success: true, 
          message: '–ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞)',
          savedCode: retryResult.rows[0],
          newCode: newCode
        });
      } catch (retryError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ:', retryError);
        res.status(500).json({ 
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏',
          details: retryError.message 
        });
      }
    } else {
      res.status(500).json({ 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥',
        details: error.message 
      });
    }
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ API
app.get('/api/bot-health', async (req, res) => {
  logRequest('GET /api/bot-health', req);
  
  try {
    await pool.query('SELECT 1');
    
    const tableCheck = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'access_codes'
      );
    `);
    
    res.json({
      status: 'ok',
      service: 'genesis-war-api',
      database: 'connected',
      access_codes_table: tableCheck.rows[0].exists,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      service: 'genesis-war-api',
      database: 'disconnected',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
app.post('/api/verify-code', async (req, res) => {
  logRequest('POST /api/verify-code', req);
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞:', req.body.code);
  
  const { code } = req.body;
  
  if (!code) {
    return res.status(400).json({ error: '–ö–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω' });
  }
  
  try {
    const result = await pool.query(`
      SELECT * FROM access_codes 
      WHERE code = $1
    `, [code]);
    
    if (result.rows.length === 0) {
      console.log('‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω:', code);
      return res.status(404).json({ error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const accessCode = result.rows[0];
    const now = new Date();
    const codeAge = now - new Date(accessCode.created_at);
    
    if (codeAge > CODE_LIFETIME) {
      console.log('‚ùå –ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª:', code);
      await pool.query(`DELETE FROM access_codes WHERE code = $1`, [code]);
      return res.status(401).json({ error: '–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª' });
    }
    
    if (accessCode.used) {
      console.log('‚ùå –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:', code);
      return res.status(401).json({ error: '–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' });
    }
    
    await pool.query(`
      UPDATE access_codes 
      SET used = true 
      WHERE code = $1
    `, [code]);
    
    const accessToken = Math.random().toString(36).substr(2, 15);
    const expiresAt = new Date(Date.now() + 60 * 60 * 1000);
    
    await pool.query(`
      INSERT INTO access_tokens (token, user_id, expires_at)
      VALUES ($1, $2, $3)
      ON CONFLICT (token) 
      DO UPDATE SET 
        user_id = EXCLUDED.user_id,
        expires_at = EXCLUDED.expires_at
    `, [accessToken, accessCode.user_id, expiresAt]);
    
    console.log('‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Ç–æ–∫–µ–Ω –≤—ã–¥–∞–Ω:', { 
      code, 
      accessToken: accessToken.substring(0, 8) + '...',
      userId: accessCode.user_id,
      expiresAt 
    });
    
    res.json({ 
      success: true,
      accessToken,
      expiresIn: 3600,
      userId: accessCode.user_id
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
app.post('/api/check-access', async (req, res) => {
  logRequest('POST /api/check-access', req);
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:', req.body.accessToken ? req.body.accessToken.substring(0, 8) + '...' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  
  const { accessToken } = req.body;
  
  if (!accessToken) {
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω' });
  }
  
  try {
    const result = await pool.query(`
      SELECT * FROM access_tokens 
      WHERE token = $1
    `, [accessToken]);
    
    if (result.rows.length === 0) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(401).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const tokenData = result.rows[0];
    const now = new Date();
    
    if (new Date(tokenData.expires_at) < now) {
      console.log('‚ùå –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª');
      await pool.query(`DELETE FROM access_tokens WHERE token = $1`, [accessToken]);
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª' });
    }
    
    console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', tokenData.user_id);
    res.json({ 
      valid: true,
      userId: tokenData.user_id 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/marks/:userId', async (req, res) => {
  logRequest(`GET /api/marks/${req.params.userId}`, req);
  
  try {
    const userId = parseInt(req.params.userId);
    const accessToken = req.headers.authorization?.split(' ')[1];
    
    console.log('üîç –ó–∞–ø—Ä–æ—Å –º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, accessToken: !!accessToken });
    
    if (!accessToken) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }
    
    const tokenResult = await pool.query(`
      SELECT * FROM access_tokens 
      WHERE token = $1
    `, [accessToken]);
    
    if (tokenResult.rows.length === 0 || tokenResult.rows[0].user_id !== userId) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const tokenData = tokenResult.rows[0];
    const now = new Date();
    
    if (new Date(tokenData.expires_at) < now) {
      await pool.query(`DELETE FROM access_tokens WHERE token = $1`, [accessToken]);
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª' });
    }
    
    const result = await pool.query(
      `SELECT tile_id, mark_type, comment 
       FROM user_marks 
       WHERE user_id = $1`,
      [userId]
    );
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    res.status(200).json(result.rows);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.params.userId}:`, error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∫–∏',
      details: error.message 
    });
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∫–∏ - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô ENDPOINT
app.post('/api/marks', async (req, res) => {
  logRequest('POST /api/marks', req);
  console.log('üíæ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∫–∏:', req.body);
  
  try {
    const { user_id, tile_id, mark_type, comment } = req.body;
    const accessToken = req.headers.authorization?.split(' ')[1];
    
    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–∫–∏:', { user_id, tile_id, mark_type, accessToken: !!accessToken });
    
    if (!accessToken) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç accessToken');
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const tokenResult = await pool.query(`
      SELECT * FROM access_tokens 
      WHERE token = $1
    `, [accessToken]);
    
    if (tokenResult.rows.length === 0) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const tokenData = tokenResult.rows[0];
    const now = new Date();
    
    if (new Date(tokenData.expires_at) < now) {
      console.log('‚ùå –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª');
      await pool.query(`DELETE FROM access_tokens WHERE token = $1`, [accessToken]);
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª' });
    }
    
    if (tokenData.user_id !== parseInt(user_id)) {
      console.log('‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞');
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    if (!user_id || !tile_id || !mark_type) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return res.status(400).json({ 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: user_id, tile_id, mark_type' 
      });
    }
    
    const VALID_MARK_TYPES = ['ally', 'enemy', 'favorite', 'clear'];
    if (!VALID_MARK_TYPES.includes(mark_type)) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ—Ç–∫–∏:', mark_type);
      return res.status(400).json({ 
        error: `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –º–µ—Ç–∫–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: ${VALID_MARK_TYPES.join(', ')}` 
      });
    }

    let query, values;
    
    if (mark_type === 'clear') {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç–æ–∫ –¥–ª—è —Ç–∞–π–ª–∞:', tile_id);
      query = 'DELETE FROM user_marks WHERE user_id = $1 AND tile_id = $2';
      values = [user_id, tile_id];
      await pool.query(query, values);
      
      res.status(200).json({ 
        success: true,
        message: '–ú–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞',
        tile_id: parseInt(tile_id),
        mark_type: 'clear'
      });
    } else {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∫–∏:', { user_id, tile_id, mark_type });
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞–π–ª–∞ (—á—Ç–æ–±—ã –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è)
      await pool.query(
        'DELETE FROM user_marks WHERE user_id = $1 AND tile_id = $2',
        [user_id, tile_id]
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É
      query = `
          INSERT INTO user_marks (user_id, tile_id, mark_type, comment)
          VALUES ($1, $2, $3, $4)
          RETURNING *;
      `;
      values = [user_id, tile_id, mark_type, comment || null];
      const result = await pool.query(query, values);
      
      console.log('‚úÖ –ú–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', result.rows[0]);
      
      res.status(200).json({ 
        success: true,
        mark: {
          user_id: result.rows[0].user_id,
          tile_id: result.rows[0].tile_id,
          mark_type: result.rows[0].mark_type,
          comment: result.rows[0].comment
        }
      });
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∫–∏:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∫—É', 
      details: error.message 
    });
  }
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π endpoint
app.get('/api/debug', async (req, res) => {
  logRequest('GET /api/debug', req);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    const tables = ['users', 'user_marks', 'access_codes', 'access_tokens', 'tiles'];
    const results = {};
    
    for (const table of tables) {
      try {
        const result = await pool.query(`SELECT COUNT(*) as count FROM ${table}`);
        results[table] = result.rows[0].count;
      } catch (error) {
        results[table] = `ERROR: ${error.message}`;
      }
    }
    
    res.json({
      status: 'ok',
      service: 'genesis-war-api',
      database: 'connected',
      tables: results,
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development'
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Health check endpoint
app.get('/health', (_req, res) => {
  res.status(200).json({ 
    status: 'ok', 
    service: 'genesis-war-api',
    timestamp: new Date().toISOString()
  });
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(port, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üåê CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö origin-–æ–≤`);
  
  try {
    await initDatabase();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    console.log('üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
    console.log('   GET  /health');
    console.log('   GET  /api/debug');
    console.log('   POST /api/save-code');
    console.log('   POST /api/verify-code');
    console.log('   POST /api/check-access');
    console.log('   GET  /api/marks/:userId');
    console.log('   POST /api/marks');
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
  }
});

export default app;
