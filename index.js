// index.js - API –°–µ—Ä–≤–∏—Å (genesis-map-api)
import express from 'express';
import cors from 'cors';
import pkg from 'pg';
const { Pool } = pkg;
import 'dotenv/config'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ dotenv/config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(cors());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Neon
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseConnection() {
  try {
    const client = await pool.connect();
    console.log('‚úÖ Database connection successful');
    client.release();
    
    const tableCheck = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'users'
      );
    `);
    
    console.log('Users table exists:', tableCheck.rows[0].exists);
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
  }
}

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
async function initDatabase() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        telegram_id BIGINT PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        username TEXT,
        language_code TEXT,
        is_premium BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –î–æ–±–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    try {
        await pool.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS language_code TEXT;`);
    } catch (e) { console.log("Column language_code may already exist or error:", e.message); }
    try {
        await pool.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS is_premium BOOLEAN DEFAULT FALSE;`);
    } catch (e) { console.log("Column is_premium may already exist or error:", e.message); }
    try {
        await pool.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP;`);
    } catch (e) { console.log("Column updated_at may already exist or error:", e.message); }

    console.log('‚úÖ Database initialized');
  } catch (error) {
    console.error('‚ùå Error initializing database:', error);
  }
}

// --- API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ---

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
app.post('/register', async (req, res) => {
  try {
    const { telegram_id, first_name, last_name, username, language_code, is_premium } = req.body;

    if (!telegram_id || !first_name) {
      return res.status(400).json({ 
        success: false, 
        error: 'Missing required fields: telegram_id and first_name are required' 
      });
    }

    const query = `
      INSERT INTO users (telegram_id, first_name, last_name, username, language_code, is_premium)
      VALUES ($1, $2, $3, $4, $5, $6)
      ON CONFLICT (telegram_id) 
      DO UPDATE SET
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name,
        username = EXCLUDED.username,
        language_code = EXCLUDED.language_code,
        is_premium = EXCLUDED.is_premium,
        updated_at = CURRENT_TIMESTAMP
      RETURNING *;
    `;

    const values = [
      telegram_id, 
      first_name, 
      last_name || null, 
      username || null, 
      language_code || 'ru',
      is_premium || false
    ];
    const result = await pool.query(query, values);

    res.status(200).json({ success: true, user: result.rows[0] });
  } catch (error) {
    console.error('‚ùå Error registering user:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message,
      details: 'Database operation failed'
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)
app.get('/users', async (req, res) => {
  try {
    const result = await pool.query('SELECT telegram_id FROM users');
    const userIds = result.rows.map(row => row.telegram_id);
    res.status(200).json(userIds);
  } catch (error) {
    console.error('‚ùå Error fetching users:', error);
    res.status(500).json({ error: 'Database error', details: error.message });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID
app.get('/users/:id', async (req, res) => {
  try {
    const userId = req.params.id;
    const result = await pool.query('SELECT * FROM users WHERE telegram_id = $1', [userId]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    res.status(200).json(result.rows[0]);
  } catch (error) {
    console.error('‚ùå Error fetching user:', error);
    res.status(500).json({ error: 'Database error', details: error.message });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä)
app.post('/notify', async (req, res) => {
  try {
    const { user_id, tile_id, action, comment } = req.body;
    console.log(`Notification: User ${user_id} performed ${action} on tile ${tile_id} with comment: ${comment}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å—å –≤ –ë–î –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç
    res.status(200).json({ success: true });
  } catch (error) {
    console.error('‚ùå Error processing notification:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    service: 'genesis-map-api'
  });
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
app.get('/test', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    message: 'API is working',
    timestamp: new Date().toISOString()
  });
});

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã ---
// –≠—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ª–æ–≥–∏–∫–æ–π –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –ü—Ä–∏–º–µ—Ä—ã:

app.get('/api/marks/:userId', async (req, res) => {
    const userId = req.params.userId;
    // –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è userId
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_marks
    try {
        // const result = await pool.query('SELECT * FROM user_marks WHERE user_id = $1', [userId]);
        // res.status(200).json(result.rows);
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        res.status(200).json([]); // –ó–∞–≥–ª—É—à–∫–∞
    } catch (error) {
        console.error('Error fetching marks:', error);
        res.status(500).json({ error: 'Failed to fetch marks' });
    }
});

app.get('/api/tiles-cache', async (req, res) => {
    // –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–ª–∞—Ö
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tiles_caches
    try {
        // const result = await pool.query('SELECT * FROM tiles_caches');
        // res.status(200).json(result.rows);
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        res.status(200).json([]); // –ó–∞–≥–ª—É—à–∫–∞
    } catch (error) {
        console.error('Error fetching tiles cache:', error);
        res.status(500).json({ error: 'Failed to fetch tiles cache' });
    }
});

app.get('/api/proxy/tile-info', async (req, res) => {
    // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ç–∞–π–ª–æ–≤
    // –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    try {
        // const result = await pool.query('SELECT ... FROM ...');
        // res.status(200).json(result.rows);
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        res.status(200).json({}); // –ó–∞–≥–ª—É—à–∫–∞
    } catch (error) {
        console.error('Error fetching proxy tile info:', error);
        res.status(500).json({ error: 'Failed to fetch proxy tile info' });
    }
});


// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---

app.listen(port, async () => {
  console.log(`üöÄ genesis-map-api server is running on port ${port}`);
  await initDatabase();
  await checkDatabaseConnection();
  console.log(`‚úÖ genesis-map-api service started successfully`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
pool.on('error', (err) => {
  console.error('‚ùå Unexpected database error', err);
  process.exit(-1);
});

// Graceful shutdown –¥–ª—è API
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down API gracefully');
  pool.end(() => {
    console.log('Database pool closed');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down API gracefully');
  pool.end(() => {
    console.log('Database pool closed');
    process.exit(0);
  });
});

export default app; // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
