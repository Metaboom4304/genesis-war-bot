// index.js - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è 65,000+ —Ç–∞–π–ª–æ–≤
import express from 'express';
import cors from 'cors';
import pkg from 'pg';
const { Pool } = pkg;
import fetch from 'node-fetch';
import 'dotenv/config';
import compression from 'compression';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';

const app = express();
const port = process.env.PORT || 3000;

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
// –í–ê–ñ–ù–û: –£–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
const CORS_ORIGIN = 'https://genesis-data.onrender.com'; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–±–µ–ª—ã —É–±—Ä–∞–Ω—ã
const EXTERNAL_TILE_API_URL = 'https://back.genesis-of-ages.space/manage/get_tile_info.php'; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–±–µ–ª—ã —É–±—Ä–∞–Ω—ã
const CACHE_TTL_MS = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
const MAX_TILES_PER_REQUEST = 2000; // –ú–∞–∫—Å–∏–º—É–º —Ç–∞–π–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å

// --- Middleware ---
app.use(helmet({
  contentSecurityPolicy: false,
  crossOriginEmbedderPolicy: false
}));

// –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
app.use(compression({ level: 6 }));

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã API
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 1000, // –º–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
});
app.use('/api/', apiLimiter);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use(cors({
  origin: CORS_ORIGIN,
  credentials: true,
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Accept']
}));

// –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
app.use(express.json({ limit: '50mb' }));

// --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL (Neon) ---
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  max: 20, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—É–ª–µ
  idleTimeoutMillis: 30000, // –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞ (30 —Å–µ–∫)
  connectionTimeoutMillis: 10000, // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (10 —Å–µ–∫)
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è SSL
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç.
 */
async function initDatabase() {
  try {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        telegram_id BIGINT PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        username TEXT,
        language_code TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç–æ–∫ –Ω–∞ —Ç–∞–π–ª–∞—Ö
    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_marks (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(telegram_id) ON DELETE CASCADE,
        tile_id INTEGER NOT NULL,
        mark_type TEXT NOT NULL, -- 'ally', 'enemy', 'favorite'
        comment TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        -- –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
        UNIQUE(user_id, tile_id, mark_type) 
      );
    `);

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–ª–æ–≤
    await pool.query(`
      CREATE TABLE IF NOT EXISTS tiles (
        id SERIAL PRIMARY KEY,
        tile_id INTEGER UNIQUE NOT NULL,
        lng DOUBLE PRECISION NOT NULL,
        lat DOUBLE PRECISION NOT NULL,
        data JSONB NOT NULL, -- –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );
    `);

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    await pool.query(`CREATE INDEX IF NOT EXISTS idx_tiles_lng_lat ON tiles(lng, lat);`);
    await pool.query(`CREATE INDEX IF NOT EXISTS idx_tiles_tile_id ON tiles(tile_id);`);
    await pool.query(`CREATE INDEX IF NOT EXISTS idx_user_marks_user_id ON user_marks(user_id);`);
    await pool.query(`CREATE INDEX IF NOT EXISTS idx_user_marks_tile_id ON user_marks(tile_id);`);

    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à —Ç–∞–π–ª–æ–≤, –∑–∞–≥—Ä—É–∂–∞—è –¥–∞–Ω–Ω—ã–µ —Å –≤–Ω–µ—à–Ω–µ–≥–æ API.
 * @returns {Promise<boolean>} true, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ false.
 */
async function refreshTileCache() {
  console.log('üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤...');
  
  try {
    // --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ---
    console.log(`üì• –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —É –≤–Ω–µ—à–Ω–µ–≥–æ API: ${EXTERNAL_TILE_API_URL}`);
    const response = await fetch(EXTERNAL_TILE_API_URL, {
      timeout: 60000, // –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'Genesis-Map-API/1.0'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const rawData = await response.json();
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ {tiles: {...}} –∏–ª–∏ —Å—Ä–∞–∑—É {...}
    const tilesData = rawData.tiles || rawData;
    
    if (!tilesData || typeof tilesData !== 'object') {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–ª–æ–≤ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API');
    }

    const tileEntries = Object.entries(tilesData);
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ ${tileEntries.length} —Ç–∞–π–ª–æ–≤ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API`);

    // --- 2. –ü–∞–∫–µ—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ---
    const batchSize = 1000; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    let processed = 0;

    for (let i = 0; i < tileEntries.length; i += batchSize) {
      const batch = tileEntries.slice(i, i + batchSize);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const values = []; // –ü–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è placeholder'–æ–≤
      const valuePlaceholders = []; // –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ placeholder'–æ–≤ –¥–ª—è SQL

      batch.forEach(([tileIdStr, tileData], index) => {
        const tileId = parseInt(tileIdStr, 10);
        if (isNaN(tileId)) {
            console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–∞–π–ª —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID: ${tileIdStr}`);
            return;
        }

        const lng = parseFloat(tileData.lng) || 0;
        const lat = parseFloat(tileData.lat) || 0;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è placeholder'–æ–≤ –≤ —ç—Ç–æ–º –ø–∞–∫–µ—Ç–µ
        // –£ –Ω–∞—Å 4 –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å: tile_id, lng, lat, data
        const baseIndex = index * 4; 
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤
        values.push(tileId, lng, lat, JSON.stringify(tileData));
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É placeholder'–æ–≤ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
        // –ü—Ä–∏–º–µ—Ä: ($1, $2, $3, $4)
        valuePlaceholders.push(`($${baseIndex + 1}, $${baseIndex + 2}, $${baseIndex + 3}, $${baseIndex + 4})`);
      });

      // –ï—Å–ª–∏ –≤ –ø–∞–∫–µ—Ç–µ –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      if (values.length > 0) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
        const query = `
          INSERT INTO tiles (tile_id, lng, lat, data)
          VALUES ${valuePlaceholders.join(', ')}
          ON CONFLICT (tile_id) 
          DO UPDATE SET 
            lng = EXCLUDED.lng,
            lat = EXCLUDED.lat,
            data = EXCLUDED.data,
            updated_at = NOW() -- –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        `;

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        await pool.query(query, values);
        processed += batch.length;
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed}/${tileEntries.length} —Ç–∞–π–ª–æ–≤`);
      }
    }

    console.log(`üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${processed} —Ç–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞:', error.message);
    // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
    return false; 
  }
}

// --- API Endpoints ---

/**
 * POST /api/users/register
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram.
 */
app.post('/api/users/register', async (req, res) => {
  try {
    const { telegram_id, first_name, last_name, username, language_code } = req.body;

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!telegram_id || !first_name) {
      return res.status(400).json({ 
        success: false, 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: telegram_id –∏ first_name' 
      });
    }

    const query = `
      INSERT INTO users (telegram_id, first_name, last_name, username, language_code)
      VALUES ($1, $2, $3, $4, $5)
      ON CONFLICT (telegram_id) 
      DO UPDATE SET
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name,
        username = EXCLUDED.username,
        language_code = EXCLUDED.language_code,
        updated_at = NOW()
      RETURNING *;
    `;

    const values = [
      telegram_id, 
      first_name, 
      last_name || null, 
      username || null, 
      language_code || 'ru'
    ];
    
    const result = await pool.query(query, values);
    res.status(200).json({ success: true, user: result.rows[0] });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      message: error.message
    });
  }
});

/**
 * GET /api/marks/:userId
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
app.get('/api/marks/:userId', async (req, res) => {
  try {
    const userId = req.params.userId;
    const result = await pool.query(
      'SELECT tile_id, mark_type, comment FROM user_marks WHERE user_id = $1', 
      [userId]
    );
    res.status(200).json(result.rows);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∫–∏' });
  }
});

/**
 * POST /api/marks
 * –°–æ–∑–¥–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–∞–π–ª–µ.
 */
app.post('/api/marks', async (req, res) => {
  try {
    const { user_id, tile_id, mark_type, comment } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!user_id || !tile_id || !mark_type) {
       return res.status(400).json({ 
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: user_id, tile_id, mark_type' 
       });
    }

    let query, values, result;

    if (mark_type === 'clear') {
        // –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏
        query = 'DELETE FROM user_marks WHERE user_id = $1 AND tile_id = $2';
        values = [user_id, tile_id];
        result = await pool.query(query, values);
        res.status(200).json({ 
          success: true, 
          message: result.rowCount > 0 ? '–ú–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞' : '–ú–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' 
        });
    } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏
        query = `
            INSERT INTO user_marks (user_id, tile_id, mark_type, comment)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (user_id, tile_id, mark_type)
            DO UPDATE SET 
              comment = EXCLUDED.comment, 
              created_at = NOW() -- –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è
            RETURNING *;
        `;
        values = [user_id, tile_id, mark_type, comment || null];
        result = await pool.query(query, values);
        res.status(200).json({ success: true, mark: result.rows[0] });
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.body.user_id} –Ω–∞ —Ç–∞–π–ª–µ ${req.body.tile_id}:`, error);
    res.status(500).json({ 
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∫—É', 
      details: error.message 
    });
  }
});

/**
 * GET /api/tiles/bounds
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–π–ª—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω—ã—Ö –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞–Ω–∏—Ü.
 */
app.get('/api/tiles/bounds', async (req, res) => {
  try {
    const { west, south, east, north, limit = 1000 } = req.query;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const bounds = {
      west: parseFloat(west),
      south: parseFloat(south),
      east: parseFloat(east),
      north: parseFloat(north)
    };

    if (isNaN(bounds.west) || isNaN(bounds.south) || isNaN(bounds.east) || isNaN(bounds.north)) {
       return res.status(400).json({
         success: false,
         error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä–∞–Ω–∏—Ü: west, south, east, north –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏'
       });
    }

    const queryLimit = Math.min(parseInt(limit), MAX_TILES_PER_REQUEST);

    const query = `
      SELECT tile_id, lng, lat, data
      FROM tiles 
      WHERE lng BETWEEN $1 AND $2 
        AND lat BETWEEN $3 AND $4
      LIMIT $5
    `;

    const result = await pool.query(query, [
      bounds.west, bounds.east, 
      bounds.south, bounds.north,
      queryLimit
    ]);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const tiles = result.rows.map(row => ({
      id: row.tile_id,
      lng: row.lng,
      lat: row.lat,
      // –ï—Å–ª–∏ data - —Å—Ç—Ä–æ–∫–∞ JSON, –ø–∞—Ä—Å–∏–º –µ—ë, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
      ...(typeof row.data === 'string' ? JSON.parse(row.data) : row.data)
    }));

    res.json({
      success: true,
      tiles,
      count: tiles.length,
      bounds,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–∞–π–ª–æ–≤ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º:', error);
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–π–ª—ã',
      message: error.message
    });
  }
});

/**
 * GET /api/tiles/count
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ.
 */
app.get('/api/tiles/count', async (req, res) => {
  try {
    const result = await pool.query('SELECT COUNT(*) as count FROM tiles');
    res.json({
      success: true,
      count: parseInt(result.rows[0].count, 10),
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–π–ª–æ–≤:', error);
    res.status(500).json({ 
      success: false, 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤',
      message: error.message 
    });
  }
});

/**
 * POST /api/cache/refresh (–î–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤.
 */
app.post('/api/cache/refresh', async (req, res) => {
  try {
    console.log('üîÑ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É API...');
    const success = await refreshTileCache();
    res.json({ 
      success, 
      message: success ? '–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω' : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞' 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞',
      message: error.message 
    });
  }
});

/**
 * GET /health
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.
 */
app.get('/health', async (req, res) => {
  try {
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await pool.query('SELECT 1');
    res.json({ 
      status: 'healthy', 
      timestamp: new Date().toISOString(),
      memory: process.memoryUsage()
    });
  } catch (error) {
    console.error('Health check failed:', error);
    res.status(500).json({ 
      status: 'unhealthy', 
      error: error.message 
    });
  }
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(port, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üåê CORS —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è: ${CORS_ORIGIN}`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
  await initDatabase();
  const cacheSuccess = await refreshTileCache();
  if (!cacheSuccess) {
    console.warn('‚ö†Ô∏è –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å. –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã.');
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
  setInterval(async () => {
    console.log('‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞...');
    await refreshTileCache();
  }, CACHE_TTL_MS);
  
  console.log(`‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∂–¥—ã–µ ${CACHE_TTL_MS / 1000 / 60} –º–∏–Ω—É—Ç.`);
});

export default app;
