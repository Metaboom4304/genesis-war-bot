// index.js - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è 65,000+ —Ç–∞–π–ª–æ–≤ —Å PostGIS
import express from 'express';
import cors from 'cors';
import pkg from 'pg';
const { Pool } = pkg;
import fetch from 'node-fetch';
import 'dotenv/config';
import compression from 'compression';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const app = express();
const port = process.env.PORT || 3000;
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
const CORS_ORIGIN = process.env.CORS_ORIGIN || 'https://genesis-data.onrender.com';
const EXTERNAL_TILE_API_URL = 'https://back.genesis-of-ages.space/manage/get_tile_info.php';
const CACHE_TTL_MS = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
const MAX_TILES_PER_REQUEST = 2000; // –ú–∞–∫—Å–∏–º—É–º —Ç–∞–π–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
const MIN_TILE_ID = 1;
const MAX_TILE_ID = 10000000;
const MAX_ZOOM = 22; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑—É–º–∞ –¥–ª—è —Ç–∞–π–ª–æ–≤

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Middleware ---
app.set('trust proxy', 1);

app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'", "https://*.t.me", "https://*.telegram.org"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://*.t.me", "https://*.telegram.org"],
      imgSrc: ["'self'", "data:", "https://*.t.me", "https://*.telegram.org"],
      connectSrc: ["'self'", process.env.API_URL || 'https://genesis-map-api.onrender.com'],
      fontSrc: ["'self'", "https://fonts.gstatic.com"],
      frameSrc: ["'self'", "https://*.t.me", "https://*.telegram.org"]
    }
  },
  crossOriginEmbedderPolicy: false
}));

app.use(compression({ level: 6 }));

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã API
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 1000, // –º–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
  standardHeaders: true,
  legacyHeaders: false,
});
app.use('/api/', apiLimiter);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use(cors({
  origin: CORS_ORIGIN,
  credentials: true,
  methods: ['GET', 'POST', 'OPTIONS', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Accept', 'Authorization', 'X-Telegram-Init-Data'],
  exposedHeaders: ['Content-Range', 'X-Content-Range']
}));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –¥–ª—è CORS preflight
app.options('/api/*', cors());

// –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
app.use(express.json({ limit: '50mb' }));

// --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL (Neon) —Å PostGIS ---
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 10000,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç.
 */
async function initDatabase() {
  try {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ PostGIS, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    await pool.query('CREATE EXTENSION IF NOT EXISTS postgis;');
    console.log('‚úÖ PostGIS —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        telegram_id BIGINT PRIMARY KEY,
        first_name TEXT NOT NULL,
        last_name TEXT,
        username TEXT,
        language_code TEXT,
        is_premium BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );
      
      CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id);
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');

    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç–æ–∫ –Ω–∞ —Ç–∞–π–ª–∞—Ö
    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_marks (
        user_id BIGINT NOT NULL,
        tile_id INTEGER NOT NULL,
        mark_type VARCHAR(20) NOT NULL,
        comment TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW(),
        PRIMARY KEY (user_id, tile_id, mark_type)
      ) PARTITION BY LIST (mark_type);
      
      -- –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç–∫–∏
      DO $$ BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'user_marks_ally') THEN
          CREATE TABLE user_marks_ally PARTITION OF user_marks
            FOR VALUES IN ('ally');
        END IF;
        IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'user_marks_enemy') THEN
          CREATE TABLE user_marks_enemy PARTITION OF user_marks
            FOR VALUES IN ('enemy');
        END IF;
        IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'user_marks_favorite') THEN
          CREATE TABLE user_marks_favorite PARTITION OF user_marks
            FOR VALUES IN ('favorite');
        END IF;
        IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'user_marks_clear') THEN
          CREATE TABLE user_marks_clear PARTITION OF user_marks
            FOR VALUES IN ('clear');
        END IF;
      END $$;
      
      CREATE INDEX IF NOT EXISTS idx_user_marks_user_id ON user_marks(user_id);
      CREATE INDEX IF NOT EXISTS idx_user_marks_tile_id ON user_marks(tile_id);
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_marks —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º');

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–ª–æ–≤ —Å PostGIS
    await pool.query(`
      CREATE TABLE IF NOT EXISTS tiles (
        tile_id INTEGER PRIMARY KEY,
        geom GEOMETRY(POINT, 4326) NOT NULL,
        has_owner BOOLEAN NOT NULL DEFAULT false,
        owner_id BIGINT,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );
      
      -- –ò–Ω–¥–µ–∫—Å –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (—É—Å–∫–æ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ –æ–±–ª–∞—Å—Ç–∏)
      CREATE INDEX IF NOT EXISTS idx_tiles_geom ON tiles USING GIST (geom);
      CREATE INDEX IF NOT EXISTS idx_tiles_has_owner ON tiles(has_owner);
      CREATE INDEX IF NOT EXISTS idx_tiles_tile_id ON tiles(tile_id);
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ tiles —Å–æ–∑–¥–∞–Ω–∞ —Å PostGIS');

    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// --- –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ ---
let isRefreshing = false;

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à —Ç–∞–π–ª–æ–≤, –∑–∞–≥—Ä—É–∂–∞—è –¥–∞–Ω–Ω—ã–µ —Å –≤–Ω–µ—à–Ω–µ–≥–æ API.
 * @returns {Promise<boolean>} true, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ false.
 */
async function refreshTileCache() {
  // --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ---
  if (isRefreshing) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
    return false;
  }
  
  isRefreshing = true;
  console.log('üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤...');
  
  try {
    // --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ---
    console.log(`üì• –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —É –≤–Ω–µ—à–Ω–µ–≥–æ API: ${EXTERNAL_TILE_API_URL}`);
    
    // --- –¢–∞–π–º–∞—É—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏ ---
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 60000);
    
    try {
      const response = await fetch(EXTERNAL_TILE_API_URL, {
        signal: controller.signal,
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'Genesis-Map-API/1.0'
        }
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const rawData = await response.json();
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ {tiles: {...}} –∏–ª–∏ —Å—Ä–∞–∑—É {...}
      const tilesData = rawData.tiles || rawData;
      
      if (!tilesData || typeof tilesData !== 'object') {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–ª–æ–≤ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API');
      }

      const tileEntries = Object.entries(tilesData);
      console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ ${tileEntries.length} —Ç–∞–π–ª–æ–≤ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API`);

      // --- 2. –ü–∞–∫–µ—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ---
      const batchSize = 1000; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      let processed = 0;

      for (let i = 0; i < tileEntries.length; i += batchSize) {
        const batch = tileEntries.slice(i, i + batchSize);
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const values = [];
        const valuePlaceholders = [];

        for (const [index, [tileIdStr, tileData]] of batch.entries()) {
          const tileId = parseInt(tileIdStr, 10);
          
          // –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è tileId
          if (isNaN(tileId) || tileId < MIN_TILE_ID || tileId > MAX_TILE_ID) {
            console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–∞–π–ª —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID: ${tileIdStr}`);
            continue;
          }

          const lng = parseFloat(tileData.lng) || 0;
          const lat = parseFloat(tileData.lat) || 0;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
          if (Math.abs(lat) > 90 || Math.abs(lng) > 180) {
            console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–∞–π–ª —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${tileId} (${lat}, ${lng})`);
            continue;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤
          values.push(
            tileId,
            lng,
            lat,
            tileData.has_owner === 'true'
          );
          
          // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É placeholder'–æ–≤ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
          const baseIndex = values.length - 4;
          valuePlaceholders.push(`($${baseIndex}, ST_SetSRID(ST_MakePoint($${baseIndex+1}, $${baseIndex+2}), 4326), $${baseIndex+3})`);
        }

        // –ï—Å–ª–∏ –≤ –ø–∞–∫–µ—Ç–µ –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        if (values.length > 0) {
          // –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
          const query = `
            INSERT INTO tiles (tile_id, geom, has_owner)
            VALUES ${valuePlaceholders.join(', ')}
            ON CONFLICT (tile_id) 
            DO UPDATE SET 
              geom = EXCLUDED.geom,
              has_owner = EXCLUDED.has_owner,
              updated_at = CASE 
                WHEN EXCLUDED.has_owner != tiles.has_owner THEN NOW() 
                ELSE tiles.updated_at 
              END
            WHERE tiles.updated_at < NOW() - INTERVAL '5 minutes'
          `;

          // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
          await pool.query(query, values);
          processed += batch.length;
          console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed}/${tileEntries.length} —Ç–∞–π–ª–æ–≤`);
        }
      }

      console.log(`üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${processed} —Ç–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
      return true;
    } catch (fetchError) {
      if (fetchError.name === 'AbortError') {
        console.error('‚ùå –ó–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç (60 —Å–µ–∫)');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –≤–Ω–µ—à–Ω–µ–º—É API:', fetchError.message);
      }
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞:', error.message);
    return false; 
  } finally {
    // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    isRefreshing = false;
  }
}

// --- API Endpoints ---

/**
 * POST /api/users/register
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram.
 */
app.post('/api/users/register', async (req, res) => {
  try {
    const { telegram_id, first_name, last_name, username, language_code, is_premium, auth_date } = req.body;

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!telegram_id || !first_name) {
      return res.status(400).json({ 
        success: false, 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: telegram_id –∏ first_name' 
      });
    }

    const query = `
      INSERT INTO users (telegram_id, first_name, last_name, username, language_code, is_premium, updated_at)
      VALUES ($1, $2, $3, $4, $5, $6, NOW())
      ON CONFLICT (telegram_id) 
      DO UPDATE SET
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name,
        username = EXCLUDED.username,
        language_code = EXCLUDED.language_code,
        is_premium = EXCLUDED.is_premium,
        updated_at = NOW()
      RETURNING *;
    `;

    const values = [
      telegram_id, 
      first_name, 
      last_name || null, 
      username || null, 
      language_code || 'ru',
      is_premium || false
    ];
    
    const result = await pool.query(query, values);
    res.status(200).json({ 
      success: true, 
      user: {
        id: result.rows[0].telegram_id,
        first_name: result.rows[0].first_name,
        last_name: result.rows[0].last_name,
        username: result.rows[0].username,
        language_code: result.rows[0].language_code,
        is_premium: result.rows[0].is_premium
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      message: error.message
    });
  }
});

/**
 * GET /api/marks/:userId
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
app.get('/api/marks/:userId', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è userId
    if (isNaN(userId)) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
      });
    }
    
    const result = await pool.query(
      `SELECT tile_id, mark_type, comment 
       FROM user_marks 
       WHERE user_id = $1`,
      [userId]
    );
    
    res.status(200).json(result.rows);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.params.userId}:`, error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∫–∏',
      details: error.message 
    });
  }
});

/**
 * POST /api/marks
 * –°–æ–∑–¥–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–∞–π–ª–µ.
 */
app.post('/api/marks', async (req, res) => {
  try {
    const { user_id, tile_id, mark_type, comment } = req.body;
    
    // –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è mark_type
    const VALID_MARK_TYPES = ['ally', 'enemy', 'favorite', 'clear'];
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!user_id || !tile_id || !mark_type) {
       return res.status(400).json({ 
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: user_id, tile_id, mark_type' 
       });
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!VALID_MARK_TYPES.includes(mark_type)) {
      return res.status(400).json({ 
        success: false,
        error: `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –º–µ—Ç–∫–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: ${VALID_MARK_TYPES.join(', ')}` 
      });
    }

    let query, values;
    
    if (mark_type === 'clear') {
        // –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏
        query = 'DELETE FROM user_marks WHERE user_id = $1 AND tile_id = $2';
        values = [user_id, tile_id];
        await pool.query(query, values);
        res.status(200).json({ 
          success: true, 
          message: '–ú–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞' 
        });
    } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏
        query = `
            INSERT INTO user_marks (user_id, tile_id, mark_type, comment, updated_at)
            VALUES ($1, $2, $3, $4, NOW())
            ON CONFLICT (user_id, tile_id, mark_type)
            DO UPDATE SET 
              comment = EXCLUDED.comment, 
              updated_at = NOW()
            RETURNING *;
        `;
        values = [user_id, tile_id, mark_type, comment || null];
        const result = await pool.query(query, values);
        res.status(200).json({ 
          success: true, 
          mark: {
            tile_id: result.rows[0].tile_id,
            mark_type: result.rows[0].mark_type,
            comment: result.rows[0].comment
          }
        });
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.body.user_id} –Ω–∞ —Ç–∞–π–ª–µ ${req.body.tile_id}:`, error);
    res.status(500).json({ 
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∫—É', 
      details: error.message 
    });
  }
});

/**
 * GET /api/tiles/bounds
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–π–ª—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω—ã—Ö –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞–Ω–∏—Ü.
 */
app.get('/api/tiles/bounds', async (req, res) => {
  try {
    const { west, south, east, north, limit = 1000, offset = 0 } = req.query;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const bounds = {
      west: parseFloat(west),
      south: parseFloat(south),
      east: parseFloat(east),
      north: parseFloat(north)
    };

    if (isNaN(bounds.west) || isNaN(bounds.south) || isNaN(bounds.east) || isNaN(bounds.north)) {
       return res.status(400).json({
         success: false,
         error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä–∞–Ω–∏—Ü: west, south, east, north –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏'
       });
    }

    const queryLimit = Math.min(parseInt(limit), MAX_TILES_PER_REQUEST);
    const queryOffset = Math.max(parseInt(offset), 0);

    // –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
    const query = `
      SELECT 
        tile_id,
        ST_X(geom) as lng,
        ST_Y(geom) as lat,
        has_owner
      FROM tiles 
      WHERE ST_Contains(
        ST_MakeEnvelope($1, $2, $3, $4, 4326),
        geom
      )
      LIMIT $5 OFFSET $6
    `;

    const result = await pool.query(query, [
      bounds.west, bounds.south, 
      bounds.east, bounds.north,
      queryLimit, queryOffset
    ]);

    // –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const tiles = result.rows.map(row => ({
      id: row.tile_id,
      lng: parseFloat(row.lng),
      lat: parseFloat(row.lat),
      has_owner: row.has_owner ? 'true' : 'false'
    }));

    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const countResult = await pool.query(`
      SELECT COUNT(*) as count
      FROM tiles 
      WHERE ST_Contains(
        ST_MakeEnvelope($1, $2, $3, $4, 4326),
        geom
      )
    `, [
      bounds.west, bounds.south, 
      bounds.east, bounds.north
    ]);
    
    const totalCount = parseInt(countResult.rows[0].count, 10);

    res.json({
      success: true,
      tiles,
      count: tiles.length,
      total: totalCount,
      bounds,
      offset: queryOffset,
      limit: queryLimit,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–∞–π–ª–æ–≤ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º:', error);
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–π–ª—ã',
      message: error.message
    });
  }
});

/**
 * GET /api/tiles/count
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ.
 */
app.get('/api/tiles/count', async (req, res) => {
  try {
    const result = await pool.query('SELECT COUNT(*) as count FROM tiles');
    res.json({
      success: true,
      count: parseInt(result.rows[0].count, 10),
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–π–ª–æ–≤:', error);
    res.status(500).json({ 
      success: false, 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤',
      message: error.message 
    });
  }
});

/**
 * POST /api/cache/refresh
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤.
 */
app.post('/api/cache/refresh', async (req, res) => {
  try {
    console.log('üîÑ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É API...');
    const success = await refreshTileCache();
    res.json({ 
      success, 
      message: success ? '–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω' : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞' 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞',
      message: error.message 
    });
  }
});

/**
 * GET /health
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.
 */
app.get('/health', async (req, res) => {
  try {
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await pool.query('SELECT 1');
    res.json({ 
      status: 'healthy', 
      timestamp: new Date().toISOString(),
      memory: process.memoryUsage()
    });
  } catch (error) {
    console.error('Health check failed:', error);
    res.status(500).json({ 
      status: 'unhealthy', 
      error: error.message 
    });
  }
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(port, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üåê CORS —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è: ${CORS_ORIGIN}`);
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
    await initDatabase();
    const cacheSuccess = await refreshTileCache();
    
    if (!cacheSuccess) {
      console.warn('‚ö†Ô∏è –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å. –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã.');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
    setInterval(async () => {
      console.log('‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞...');
      await refreshTileCache();
    }, CACHE_TTL_MS);
    
    console.log(`‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∂–¥—ã–µ ${CACHE_TTL_MS / 1000 / 60} –º–∏–Ω—É—Ç.`);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω
  }
});

export default app;
