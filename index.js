// index.js - API –°–µ—Ä–≤–∏—Å (genesis-map-api) —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏ –ø—Ä–∞–≤–∫–∞–º–∏
import express from 'express';
import cors from 'cors';
import pkg from 'pg';
const { Pool } = pkg;
import fetch from 'node-fetch';
import 'dotenv/config';
import compression from 'compression';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';

const app = express();
const port = process.env.PORT || 3000;

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
const CORS_ORIGIN = 'https://genesis-data.onrender.com';
// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• —Ç–∞–π–ª–æ–≤
const EXTERNAL_TILE_API_URL = 'https://back.genesis-of-ages.space/manage/get_tile_info.php?all_info=1';
const CACHE_TTL_MS = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
const CDN_CACHE_MAX_AGE = 3600; // 1 —á–∞—Å –¥–ª—è CDN
const BROWSER_CACHE_MAX_AGE = 300; // 5 –º–∏–Ω—É—Ç –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞

// --- Middleware ---
// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet({
  contentSecurityPolicy: false,
  crossOriginEmbedderPolicy: false
}));

// –°–∂–∞—Ç–∏–µ
app.use(compression({ level: 6 }));

// –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per windowMs
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
});
app.use('/api/', apiLimiter);

// CORS
app.use(cors({
  origin: CORS_ORIGIN,
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Origin', 'X-Requested-With', 'Content-Type', 'Accept', 'Authorization'],
  optionsSuccessStatus: 200
}));

app.use(express.json({ limit: '10mb' }));

// --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  max: 5,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 5000,
  ssl: {
    rejectUnauthorized: false
  }
});

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseConnection() {
  try {
    const client = await pool.connect();
    console.log('‚úÖ Database connection successful');
    client.release();
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
async function initDatabase() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        telegram_id BIGINT PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        username TEXT,
        language_code TEXT,
        is_premium BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);

    await pool.query(`
      CREATE TABLE IF NOT EXISTS user_marks (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(telegram_id) ON DELETE CASCADE,
        tile_id INTEGER NOT NULL,
        mark_type TEXT NOT NULL,
        comment TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, tile_id, mark_type)
      );
    `);

    await pool.query(`
      CREATE TABLE IF NOT EXISTS tiles_caches (
        tile_id INTEGER PRIMARY KEY,
        data JSONB, -- –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–ª–∞ –∫–∞–∫ JSONB
        last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);

    console.log('‚úÖ Database tables initialized');
  } catch (error) {
    console.error('‚ùå Error initializing database tables:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
async function isTileCacheStale() {
  try {
    const result = await pool.query(
      'SELECT MAX(last_updated) AS latest_update FROM tiles_caches'
    );
    const latestUpdate = result.rows[0]?.latest_update;
    
    if (!latestUpdate) {
      console.log('üîç –ö—ç—à —Ç–∞–π–ª–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
      return true; // –ö—ç—à –ø—É—Å—Ç–æ–π
    }
    
    const now = new Date();
    const lastUpdated = new Date(latestUpdate);
    const ageMs = now - lastUpdated;
    
    console.log(`‚è±Ô∏è –í–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤: ${Math.round(ageMs / 1000 / 60)} –º–∏–Ω—É—Ç.`);
    
    return ageMs > CACHE_TTL_MS;
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å, —á—Ç–æ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª
    return true;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤
async function refreshTileCache() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤...');
    try {
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 30000); // 30 —Å–µ–∫—É–Ω–¥

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• —Ç–∞–π–ª–æ–≤
        console.log(`üì• –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫: ${EXTERNAL_TILE_API_URL}`);
        const response = await fetch(EXTERNAL_TILE_API_URL, {
            method: 'GET',
            signal: controller.signal
            // headers: { /* –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ */ }
        });

        clearTimeout(timeout);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
        }

        const contentType = response.headers.get('content-type');
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç. Content-Type: ${contentType}`);

        let fullResponseData;
        if (contentType && contentType.includes('application/json')) {
            fullResponseData = await response.json();
            console.log(`üì• –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—à–µ–Ω –∫–∞–∫ JSON. –¢–∏–ø –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: ${typeof fullResponseData}`);
        } else {
            const textData = await response.text();
            console.warn(`‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON. Content-Type: ${contentType}. –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:`, textData.substring(0, 200));
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            try {
                fullResponseData = JSON.parse(textData);
            } catch (parseError) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ JSON:', parseError.message);
                throw new Error(`Response body is not valid JSON. Content-Type was ${contentType}`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        console.log(`üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:`);
        console.log(`   - typeof fullResponseData: ${typeof fullResponseData}`);
        if (fullResponseData && typeof fullResponseData === 'object') {
            console.log(`   - isArray: ${Array.isArray(fullResponseData)}`);
            console.log(`   - keys (first 10):`, Object.keys(fullResponseData).slice(0, 10));
        }
        
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–ª–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ–ª–µ 'tiles' –∏–ª–∏ —è–≤–ª—è—é—Ç—Å—è —Å–∞–º–∏–º –æ–±—ä–µ–∫—Ç–æ–º
        let tileData = {};
        if (fullResponseData && typeof fullResponseData === 'object' && !Array.isArray(fullResponseData)) {
            if (fullResponseData.tiles && typeof fullResponseData.tiles === 'object') {
                tileData = fullResponseData.tiles;
                console.log(`üì• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ 'tiles'. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤ –≤ 'tiles': ${Object.keys(tileData).length}`);
            } else {
                // –ï—Å–ª–∏ 'tiles' –Ω–µ—Ç, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–∞–º –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–π–ª—ã
                tileData = fullResponseData;
                console.log(`üì• –ü–æ–ª–µ 'tiles' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–ª–æ–≤. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: ${Object.keys(tileData).length}`);
            }
        } else if (Array.isArray(fullResponseData)) {
             console.warn(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º. –≠—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${fullResponseData.length}`);
             // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å id)
             tileData = {};
             fullResponseData.forEach((item, index) => {
                 if (item && typeof item === 'object' && item.id_tile) {
                     tileData[item.id_tile] = item;
                 } else {
                     tileData[`item_${index}`] = item; // fallback
                 }
             });
             console.log(`üì• –ú–∞—Å—Å–∏–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –æ–±—ä–µ–∫—Ç. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤: ${Object.keys(tileData).length}`);
        } else {
            console.error(`‚ùå –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${typeof fullResponseData}`);
            throw new Error(`Unsupported data format received from external API: ${typeof fullResponseData}`);
        }
        
        console.log(`üì• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${Object.keys(tileData).length}`);

        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            let updatedCount = 0;
            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –≤–Ω—É—Ç—Ä–∏ tileData (–∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è id_tile)
            for (const [tileIdStr, tileInfo] of Object.entries(tileData)) {
                const tileId = parseInt(tileIdStr, 10);
                if (isNaN(tileId)) {
                    console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∞–π–ª–∞: ${tileIdStr}`);
                    continue;
                }
                // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º tileInfo –∫–∞–∫ JSON *—Å—Ç—Ä–æ–∫—É* –≤ –ø–æ–ª–µ data (JSONB)
                await client.query(
                    `
                    INSERT INTO tiles_caches (tile_id, data, last_updated)
                    VALUES ($1, $2, CURRENT_TIMESTAMP)
                    ON CONFLICT (tile_id)
                    DO UPDATE SET data = EXCLUDED.data, last_updated = CURRENT_TIMESTAMP;
                    `,
                    [tileId, JSON.stringify(tileInfo)] // –í—Å–µ–≥–¥–∞ JSON.stringify!
                );
                updatedCount++;
            }
            
            await client.query('COMMIT');
            console.log(`‚úÖ –ö—ç—à —Ç–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updatedCount}`);
            return true;
        } catch (err) {
            await client.query('ROLLBACK');
            throw err;
        } finally {
            client.release();
        }
    } catch (error) {
        if (error.name === 'AbortError') {
            console.error('‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤ (30 —Å–µ–∫—É–Ω–¥)');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤:', error.message);
        }
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return false;
    }
}


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ë–î
function withDatabaseErrorHandling(handler) {
  return async (req, res) => {
    try {
      await handler(req, res);
    } catch (error) {
      console.error('Database error:', error);
      
      if (error.code === '23505') { // unique violation
        return res.status(409).json({ error: 'Duplicate entry' });
      }
      if (error.code === '23503') { // foreign key violation
        return res.status(400).json({ error: 'Invalid reference' });
      }
      
      res.status(500).json({ 
        error: 'Database error', 
        message: process.env.NODE_ENV === 'development' ? error.message : 'Internal error'
      });
    }
  };
}

// --- API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ---

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---

app.post('/register', withDatabaseErrorHandling(async (req, res) => {
  const { telegram_id, first_name, last_name, username, language_code, is_premium } = req.body;

  if (!telegram_id || !first_name) {
    return res.status(400).json({ 
      success: false, 
      error: 'Missing required fields: telegram_id and first_name are required' 
    });
  }

  const query = `
    INSERT INTO users (telegram_id, first_name, last_name, username, language_code, is_premium)
    VALUES ($1, $2, $3, $4, $5, $6)
    ON CONFLICT (telegram_id) 
    DO UPDATE SET
      first_name = EXCLUDED.first_name,
      last_name = EXCLUDED.last_name,
      username = EXCLUDED.username,
      language_code = EXCLUDED.language_code,
      is_premium = EXCLUDED.is_premium,
      updated_at = CURRENT_TIMESTAMP
    RETURNING *;
  `;

  const values = [
    telegram_id, 
    first_name, 
    last_name || null, 
    username || null, 
    language_code || 'ru',
    is_premium || false
  ];
  const result = await pool.query(query, values);

  res.status(200).json({ success: true, user: result.rows[0] });
}));

app.post('/api/users/register', withDatabaseErrorHandling(async (req, res) => {
  // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É /register
  return app._router.handle({ method: 'POST', url: '/register', body: req.body }, res);
}));

app.get('/users', withDatabaseErrorHandling(async (req, res) => {
  const result = await pool.query('SELECT telegram_id FROM users');
  const userIds = result.rows.map(row => row.telegram_id);
  res.status(200).json(userIds);
}));

app.get('/users/:id', withDatabaseErrorHandling(async (req, res) => {
  const userId = req.params.id;
  const result = await pool.query('SELECT * FROM users WHERE telegram_id = $1', [userId]);
  
  if (result.rows.length === 0) {
    return res.status(404).json({ error: 'User not found' });
  }
  
  res.status(200).json(result.rows[0]);
}));

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---

app.post('/notify', withDatabaseErrorHandling(async (req, res) => {
  const { user_id, tile_id, action, comment } = req.body;
  console.log(`Notification: User ${user_id} performed ${action} on tile ${tile_id} with comment: ${comment}`);
  res.status(200).json({ success: true });
}));

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã ---

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/marks/:userId', withDatabaseErrorHandling(async (req, res) => {
    const userId = req.params.userId;
    try {
        const result = await pool.query(
          'SELECT tile_id, mark_type, comment FROM user_marks WHERE user_id = $1', 
          [userId]
        );
        res.status(200).json(result.rows);
    } catch (error) {
        console.error(`Error fetching marks for user ${userId}:`, error);
        res.status(500).json({ error: 'Failed to fetch marks' });
    }
}));

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/marks', withDatabaseErrorHandling(async (req, res) => {
    const { user_id, tile_id, mark_type, comment } = req.body;
    
    if (!user_id || !tile_id || !mark_type) {
       return res.status(400).json({ error: 'Missing required fields: user_id, tile_id, mark_type' });
    }

    try {
        let query, values;
        if (mark_type === 'clear') {
            query = 'DELETE FROM user_marks WHERE user_id = $1 AND tile_id = $2';
            values = [user_id, tile_id];
        } else {
            query = `
                INSERT INTO user_marks (user_id, tile_id, mark_type, comment)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id, tile_id, mark_type)
                DO UPDATE SET comment = EXCLUDED.comment, created_at = CURRENT_TIMESTAMP
                RETURNING *;
            `;
            values = [user_id, tile_id, mark_type, comment || null];
        }
        
        const result = await pool.query(query, values);
        
        if (mark_type === 'clear' && result.rowCount === 0) {
             res.status(200).json({ success: true, message: 'Mark cleared (was not present)' });
        } else {
            res.status(200).json({ success: true, mark: result.rows[0] || null });
        }
    } catch (error) {
        console.error(`Error saving mark for user ${user_id} on tile ${tile_id}:`, error);
        res.status(500).json({ error: 'Failed to save mark', details: error.message });
    }
}));

// –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–π–ª–æ–≤ –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö
app.get('/api/tiles-in-bounds', async (req, res) => {
  try {
    const { west, south, east, north, zoom } = req.query;

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (west === undefined || south === undefined || east === undefined || north === undefined) {
      return res.status(400).json({ error: 'Missing required query parameters: west, south, east, north' });
    }

    const westNum = parseFloat(west);
    const southNum = parseFloat(south);
    const eastNum = parseFloat(east);
    const northNum = parseFloat(north);
    const zoomNum = zoom ? parseInt(zoom, 10) : null;

    if (isNaN(westNum) || isNaN(southNum) || isNaN(eastNum) || isNaN(northNum) || (zoom && isNaN(zoomNum))) {
      return res.status(400).json({ error: 'Invalid query parameter types. Coordinates must be numbers.' });
    }

    console.log(`üì• –ó–∞–ø—Ä–æ—Å —Ç–∞–π–ª–æ–≤ –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö: W:${westNum}, S:${southNum}, E:${eastNum}, N:${northNum}, Z:${zoomNum}`);

    // === –í–ê–ñ–ù–û: CDN –ó–ê–ì–û–õ–û–í–ö–ò ===
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏,
    // —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –æ–±–ª–∞—Å—Ç–∏. –û—Å–Ω–æ–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ.
    res.setHeader('Cache-Control', `public, max-age=60`); // –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 1 –º–∏–Ω—É—Ç—É
    res.setHeader('Vary', 'Origin');
    res.setHeader('Access-Control-Allow-Origin', CORS_ORIGIN);
    res.setHeader('Access-Control-Allow-Credentials', 'true');

    // –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π–ª–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ JSON –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–ª–∞ –µ—Å—Ç—å –ø–æ–ª—è lng –∏ lat
    const query = `
      SELECT tile_id, data
      FROM tiles_caches tc
      WHERE EXISTS (
        SELECT 1
        FROM jsonb_to_record(tc.data) AS t(lng numeric, lat numeric)
        WHERE t.lng BETWEEN $1 AND $2 AND t.lat BETWEEN $3 AND $4
      )
    `;
    const values = [westNum, eastNum, southNum, northNum];

    const result = await pool.query(query, values);
    
    const tilesObject = {};
    result.rows.forEach(row => {
      try {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–ª–∞ –∏–∑ JSONB
        const tileData = JSON.parse(row.data); // row.data - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON –∏–∑ JSONB –ø–æ–ª—è
        tilesObject[row.tile_id] = { id_tile: row.tile_id, ...tileData };
      } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–ª–∞ ${row.tile_id}:`, e);
      }
    });

    console.log(`üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${Object.keys(tilesObject).length} —Ç–∞–π–ª–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö`);
    res.status(200).json({ 
      tiles: tilesObject,
      count: Object.keys(tilesObject).length,
      bounds: { west: westNum, south: southNum, east: eastNum, north: northNum, zoom: zoomNum },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error fetching tiles in bounds:', error);
    res.status(500).json({ 
      error: 'Failed to fetch tiles in bounds', 
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –ì–ª–∞–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π–ª–æ–≤ —Å CDN –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–≤—Å–µ —Ç–∞–π–ª—ã)
app.get('/api/tiles-cache', async (req, res) => {
  try {
    console.log('üì• –ó–∞–ø—Ä–æ—Å –∫ /api/tiles-cache');
    
    // === –í–ê–ñ–ù–û: CDN –ó–ê–ì–û–õ–û–í–ö–ò ===
    res.setHeader('Cache-Control', `public, max-age=${BROWSER_CACHE_MAX_AGE}, s-maxage=${CDN_CACHE_MAX_AGE}`);
    res.setHeader('CDN-Cache-Control', `max-age=${CDN_CACHE_MAX_AGE}`);
    res.setHeader('Vary', 'Origin');
    res.setHeader('Access-Control-Allow-Origin', CORS_ORIGIN);
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    
    // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    isTileCacheStale().then(async isStale => {
      if (isStale) {
        console.log('üîÑ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
        try {
          await refreshTileCache();
        } catch (err) {
          console.error('–§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å:', err);
        }
      }
    }).catch(err => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞:', err);
    });
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
    const result = await pool.query(`
      SELECT tile_id, data 
      FROM tiles_caches 
      ORDER BY tile_id
    `);
    
    const tilesObject = {};
    result.rows.forEach(row => {
      try {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–ª–∞ –∏–∑ JSONB
        const tileData = JSON.parse(row.data); // row.data - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON –∏–∑ JSONB –ø–æ–ª—è
        tilesObject[row.tile_id] = { id_tile: row.tile_id, ...tileData };
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–ª–∞:', e);
      }
    });
    
    console.log(`üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤: ${Object.keys(tilesObject).length}`);
    res.status(200).json({ 
      tiles: tilesObject,
      cached: true,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error fetching tiles cache:', error.message);
    
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å fallback –¥–∞–Ω–Ω—ã–º–∏
    res.status(200).json({ 
      tiles: {}, 
      error: 'cache_unavailable',
      message: 'Using fallback data',
      timestamp: new Date().toISOString()
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ (–±–µ–∑ CDN –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è)
app.get('/api/tiles-cache/refresh', async (req, res) => {
  try {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–∞–π–ª–æ–≤');
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Access-Control-Allow-Origin', CORS_ORIGIN);
    
    const success = await refreshTileCache();
    
    if (success) {
      res.status(200).json({ 
        success: true, 
        message: 'Cache refreshed successfully',
        timestamp: new Date().toISOString()
      });
    } else {
      res.status(500).json({ 
        success: false, 
        error: 'Cache refresh failed',
        timestamp: new Date().toISOString()
      });
    }
  } catch (error) {
    console.error('‚ùå Error forcing cache refresh:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ç–∞–π–ª–æ–≤ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î
app.get('/api/proxy/tile-info', withDatabaseErrorHandling(async (req, res) => {
  console.log('üì• –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ /api/proxy/tile-info. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.');
  try {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    const refreshSuccess = await refreshTileCache();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const response = await fetch(EXTERNAL_TILE_API_URL);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const rawData = await response.json();
    
    if (refreshSuccess) {
      res.status(200).json({ ...rawData, message: "Data fetched and cache updated" });
    } else {
         // –î–∞–∂–µ –µ—Å–ª–∏ –∫—ç—à –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
         res.status(200).json({ ...rawData, message: "Data fetched, but cache update failed", cache_update_success: false });
    }
  } catch (error) {
    console.error('‚ùå Error in /api/proxy/tile-info:', error);
    // –í–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ 500, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    try {
         const cacheResult = await pool.query('SELECT tile_id, data FROM tiles_caches LIMIT 1');
         if (cacheResult.rows.length > 0) {
             console.log("‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.");
             const tilesObject = {};
             cacheResult.rows.forEach(row => {
                 // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ row.data - —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ JSON
                 tilesObject[row.tile_id] = { id_tile: row.tile_id, ...JSON.parse(row.data) };
             });
             return res.status(200).json({ tiles: tilesObject, message: "External API failed, data from cache", from_cache: true });
         }
    } catch (cacheError) {
         console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", cacheError);
    }
    res.status(500).json({ error: 'Failed to fetch proxy tile info', details: error.message });
  }
}));

// --- Health checks ---
app.get('/health', (req, res) => {
  res.setHeader('Cache-Control', 'no-cache');
  res.status(200).json({ 
    status: 'OK', 
    service: 'genesis-map-api',
    memory_usage: `${Math.round(process.memoryUsage().rss / 1024 / 1024)}MB`,
    uptime: `${Math.round(process.uptime())}s`,
    timestamp: new Date().toISOString()
  });
});

app.get('/health/db', async (req, res) => {
  res.setHeader('Cache-Control', 'no-cache');
  try {
    await pool.query('SELECT 1');
    res.status(200).json({ 
      status: 'OK', 
      database: 'connected',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'ERROR', 
      database: 'disconnected',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---

// –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
setInterval(async () => {
  try {
    // –û—á–∏—â–∞–µ–º –∫—ç—à —Ç–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    await pool.query(`
      DELETE FROM tiles_caches 
      WHERE last_updated < NOW() - INTERVAL '7 days'
    `);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await pool.query(`
      DELETE FROM user_marks 
      WHERE created_at < NOW() - INTERVAL '30 days'
    `);
    
    console.log('‚úÖ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏:', error);
  }
}, 24 * 60 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
setInterval(() => {
  const used = process.memoryUsage();
  const memoryUsage = {
    rss: Math.round(used.rss / 1024 / 1024) + 'MB',
    heapTotal: Math.round(used.heapTotal / 1024 / 1024) + 'MB',
    heapUsed: Math.round(used.heapUsed / 1024 / 1024) + 'MB',
    external: Math.round(used.external / 1024 / 1024) + 'MB'
  };
  console.log('Memory usage:', memoryUsage);
}, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

app.listen(port, async () => {
  console.log(`üöÄ genesis-map-api server is running on port ${port}`);
  console.log(`üåê CORS enabled for: ${CORS_ORIGIN}`);
  console.log(`üíæ CDN cache max-age: ${CDN_CACHE_MAX_AGE} seconds`);
  
  await initDatabase();
  await checkDatabaseConnection();
  
  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ç–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...");
  const isStale = await isTileCacheStale();
  
  if (isStale) {
      console.log("üîÑ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –û–±–Ω–æ–≤–ª—è–µ–º...");
      await refreshTileCache();
  } else {
      console.log("‚úÖ –ö—ç—à —Ç–∞–π–ª–æ–≤ –∞–∫—Ç—É–∞–ª–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.");
  }
  
  console.log(`‚úÖ genesis-map-api service started successfully. Memory: ${Math.round(process.memoryUsage().rss / 1024 / 1024)}MB`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
pool.on('error', (err) => {
  console.error('‚ùå Unexpected database error', err);
  process.exit(-1);
});

// Graceful shutdown –¥–ª—è API
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down API gracefully');
  pool.end(() => {
    console.log('Database pool closed');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down API gracefully');
  pool.end(() => {
    console.log('Database pool closed');
    process.exit(0);
  });
});

export default app;
