// index.js - –í–µ–±-API –¥–ª—è GENESIS WAR MAP
import 'dotenv/config';
import express from 'express';
import { Pool } from 'pg';
import cors from 'cors';
import fetch from 'node-fetch'; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ node-fetch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è 2.x –¥–ª—è ESM)

const app = express();
const PORT = process.env.WEB_API_PORT || 3001; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Neon PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
const corsOptions = {
  origin: [
    'https://genesis-data.onrender.com', // URL —Ç–≤–æ–µ–π –∫–∞—Ä—Ç—ã
    'https://web.telegram.org',
    'http://localhost:3000',
    // –î–æ–±–∞–≤—å —Å—é–¥–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –¥–æ–º–µ–Ω, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å
  ],
  optionsSuccessStatus: 200
};

app.use(cors(corsOptions));
app.use(express.json({ limit: '10mb' }));

// --- –ú–∏–¥–ª–≤–∞—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ ---
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path} from ${req.ip}`);
  next();
});
// ---------------------------------------

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ---

// Health check endpoint
app.get('/health', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await pool.query('SELECT NOW()');
    res.status(200).json({ 
      status: 'OK', 
      service: 'genesis-map-api',
      timestamp: new Date().toISOString(),
      database: 'connected'
    });
  } catch (err) {
    console.error('Health check failed:', err);
    res.status(503).json({ 
      status: 'ERROR', 
      service: 'genesis-map-api',
      error: 'Database connection failed',
      timestamp: new Date().toISOString()
    });
  }
});

// --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
app.post('/api/users', async (req, res) => {
  try {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ—Ç Telegram WebApp –∏–ª–∏ –±–æ—Ç–∞
    const { telegram_id, first_name, last_name, username } = req.body;
    
    if (!telegram_id) {
      return res.status(400).json({ error: 'telegram_id is required' });
    }

    const result = await pool.query(
      `INSERT INTO users (telegram_id, first_name, last_name, username)
       VALUES ($1, $2, $3, $4)
       ON CONFLICT (telegram_id) DO UPDATE SET
         first_name = EXCLUDED.first_name,
         last_name = EXCLUDED.last_name,
         username = EXCLUDED.username,
         updated_at = CURRENT_TIMESTAMP
       RETURNING *`,
      [telegram_id, first_name, last_name, username]
    );
    
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: 'Database error', details: error.message });
  }
});

// --- –†–∞–±–æ—Ç–∞ —Å –º–µ—Ç–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
app.post('/api/marks', async (req, res) => {
  try {
    const { user_id, tile_id, mark_type, comment } = req.body;
    
    if (!user_id || !tile_id || !mark_type) {
       return res.status(400).json({ error: 'user_id, tile_id, and mark_type are required' });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–µ—Ç–∫–∏ —Ç–∞–∫–æ–≥–æ –∂–µ —Ç–∏–ø–∞ –¥–ª—è —ç—Ç–æ–π –ø–ª–∏—Ç–∫–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await pool.query(
      `DELETE FROM user_marks 
       WHERE user_id = $1 AND tile_id = $2 AND mark_type = $3`,
      [user_id, tile_id, mark_type]
    );
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–µ—Ç–∫–∏ (–µ—Å–ª–∏ –Ω–µ —Å–±—Ä–æ—Å)
    let result;
    if (mark_type !== 'clear') {
      result = await pool.query(
        `INSERT INTO user_marks (user_id, tile_id, mark_type, comment)
         VALUES ($1, $2, $3, $4)
         RETURNING *`,
        [user_id, tile_id, mark_type, comment || null] // comment –º–æ–∂–µ—Ç –±—ã—Ç—å null
      );
      
      return res.status(201).json(result.rows[0]);
    }
    
    res.status(200).json({ message: 'Mark cleared' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∫–∏:', error);
    res.status(500).json({ error: 'Database error', details: error.message });
  }
});

app.get('/api/marks/:user_id', async (req, res) => {
  try {
    const userId = req.params.user_id;
    
    if (!userId) {
       return res.status(400).json({ error: 'user_id is required' });
    }

    const result = await pool.query(
      `SELECT tile_id, mark_type, comment, created_at FROM user_marks WHERE user_id = $1`,
      [userId]
    );
    
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–∫:', error);
    res.status(500).json({ error: 'Database error', details: error.message });
  }
});

// --- –†–∞–±–æ—Ç–∞ —Å –∫–µ—à–µ–º —Ç–∞–π–ª–æ–≤ ---
// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–µ—à–∞
app.get('/api/tiles-cache', async (req, res) => {
  try {
    const result = await pool.query(
      `SELECT data, last_updated FROM tiles_cache 
       ORDER BY last_updated DESC 
       LIMIT 1`
    );
    
    if (result.rows.length > 0) {
        res.json(result.rows[0]);
    } else {
        res.status(404).json({ error: 'Cache not found' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞:', error);
    res.status(500).json({ error: 'Database error', details: error.message });
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
app.post('/api/tiles-cache', async (req, res) => {
  try {
    const { data } = req.body;
    
    if (!data) {
       return res.status(400).json({ error: 'data is required' });
    }

    const result = await pool.query(
      `INSERT INTO tiles_cache (data) 
       VALUES ($1) 
       RETURNING data, last_updated`,
      [data] // data –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å JSONB
    );
    
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞:', error);
    res.status(500).json({ error: 'Database error', details: error.message });
  }
});

// --- –ü—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏–≥—Ä—ã ---
app.get('/api/proxy/tile-info', async (req, res) => {
  try {
    console.log('–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏–≥—Ä—ã...');
    const url = 'https://back.genesis-of-ages.space/manage/get_tile_info.php';
    const response = await fetch(url, {
      timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });
    
    if (!response.ok) {
      throw new Error(`Remote server error: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: ${Object.keys(data).length} —Ç–∞–π–ª–æ–≤`);
    res.json(data);
  } catch (error) {
    console.error('Proxy error:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
    res.status(502).json({ 
      error: 'Proxy error', 
      details: error.message,
      timestamp: new Date().toISOString(),
      target: 'https://back.genesis-of-ages.space/manage/get_tile_info.php'
    });
  }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è API ---
app.use('/api/*', (req, res) => {
  res.status(404).json({ error: 'API endpoint not found', path: req.path });
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
app.use((error, req, res, next) => {
  console.error('Server error:', error);
  res.status(500).json({ 
    error: 'Internal server error', 
    details: error.message,
    timestamp: new Date().toISOString()
  });
});

// --- –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ---
// –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, GENESIS_LAUNCHER.js)
let server;

function startAPIServer() {
    return new Promise((resolve) => {
        server = app.listen(PORT, () => {
          console.log(`üöÄ –í–µ–±-API –¥–ª—è –∫–∞—Ä—Ç—ã –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
          console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${process.env.DATABASE_URL ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}`);
          console.log(`üåê CORS origins: ${corsOptions.origin.join(', ')}`);
          resolve(server);
        });
    });
}

function stopAPIServer() {
    if (server) {
        server.close(() => {
            console.log('üõë –í–µ–±-API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        });
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    startAPIServer().catch(console.error);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
export { app, startAPIServer, stopAPIServer, pool };
